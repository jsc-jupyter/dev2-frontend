{# lmod --> #}
  function getModuleValues(serviceId, rowId, name, setName) {
    const options = val(getInputElement(serviceId, rowId, "option"));
    let values = [];
    let keys = new Set();
    options.forEach(option => {
      if (getServiceConfig(serviceId)?.options?.[option]?.[setName]) {
        const nameSet = getServiceConfig(serviceId)?.options[option]?.[setName];
        Object.entries(userModulesConfig[name])
          .filter(([key, value]) => value.sets && value.sets.includes(nameSet))
          .forEach( ([key, value]) => {
            if ( !keys.has(key) ) {
              keys.add(key);
              values.push([
                key,
                value.displayName,
                typeof value.default === 'object' && value.default !== null ? value.default.default : value.default,
                value.href
              ]);
            }
          });
      }
    });
    return values;
  }


  function updateModule(serviceId, rowId, tabId, elementId, elementOptions, name, setName) {
    const containerDiv = $(`div[id^='${serviceId}-${rowId}-${modulesTabName}-'][id$='${elementId}-checkboxes-div']`);
    const inputDiv = $(`div[id^='${serviceId}-${rowId}-${modulesTabName}-'][id$='${elementId}-input-div']`);
    let values = getModuleValues(serviceId, rowId, name, setName);

    // for workshops we will disable all checkboxes, so users cannot change the selection
    let workshopPreset = false;
    let workshopPresetChecked = [];
    {%- if pagetype == vars.pagetype_workshop and db_workshops %}
      const workshopValues = {{ db_workshops | tojson }}.user_options || {};
      if ( Object.keys(workshopValues).includes("userModules") && Object.keys(workshopValues.userModules).includes(name) ){
        workshopPreset = true;
        const modules = workshopValues.userModules[name];
        if ( modules.length > 0 ) {
          workshopPresetChecked = modules;
        }
      }
    {%- endif %}

    // Ensure the container exists
    if (containerDiv.length > 0 && values.length > 0) {
      const idPrefix = containerDiv.attr('id').replace(/-checkboxes-div$/, "");
      containerDiv.html('');
      values.forEach(function (item) {
        let isChecked = '';
        let isDisabled = '';
        if ( workshopPreset ) {
          if ( workshopPresetChecked.includes(item[0]) ){
            isChecked = 'checked';
          }
          isDisabled = 'disabled="true"';
        } else {
          isChecked = item[2] ? 'checked' : '';
        }
        // Create the new div block
        const newDiv = $(`
          <div id="${idPrefix}-${item[0]}-input-div" class="form-check col-sm-6 col-md-4 col-lg-3">
            <input type="checkbox" name="${item[0]}" class="form-check-input" id="${idPrefix}-${item[0]}-input" value="${item[0]}" ${isChecked} ${isDisabled}/>
            <label class="form-check-label" for="${idPrefix}-${item[0]}-input">
              <span class="align-middle">${item[1]}</span>
              <a href="${item[3]}" target="_blank" class="module-info text-muted ms-3">
                <span>{{ svg.info_svg | safe }}</span>
                <div class="module-info-link-div d-inline-block">
                  <span class="module-info-link" id="nbdev-info-link"> {{ svg.link_svg | safe }}</span>
                </div>
              </a>
            </label>
          </div>
        `);
        // Append the new div to the container
        containerDiv.append(newDiv);
        // Add toggle function to each checkbox
        $(`#${idPrefix}-${item[0]}-input`).on("click", function (event) {
          $(`input[id^='${serviceId}-${rowId}-${modulesTabName}-'][id$='-select-all']`).prop("checked", false);
          $(`input[id^='${serviceId}-${rowId}-${modulesTabName}-'][id$='-select-none']`).prop("checked", false);
        });
      });
    }
    inputDiv.show();
  }

{# <-- lmod #}