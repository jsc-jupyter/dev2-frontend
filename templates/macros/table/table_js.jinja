{# 
  Different sites may use the functions slighty different
#}

{%- import "macros/table/variables.jinja" as vars with context %}
{%- import "macros/svgs.jinja" as svg -%}

<script type="text/javascript">


  // table_js_start
  

  // Define the regex pattern with named capture groups
  const serviceConfig = {{ frontendCollection.get("serviceConfig", {}) | tojson }};
  const userModulesConfig = {{ frontendCollection.get("userModules", {}) | tojson }};
  const systemConfig = {{ frontendCollection.get("systemConfig", {}) | tojson }};
  const resourcesConfig = {{ frontendCollection.get("resourcesConfig", {}) | tojson }};
  const backendServicesConfig = {{ frontendCollection.get("backendServices", {}) | tojson }};

  const notAllowedKeys = ["secret_keys", "defaultvalues", "attachvalues"];
  const mappingDict = {};
  const globalUserOptions = {};
  const initIncidents = {{ frontendCollection.get("incidents", {}) | tojson }};
  const incidentsmapping = {
    "JSCCLOUD": "JSC-Cloud"
  };
  const incidentsThresholdInteractive = {{ frontendCollection.get("incidentCheck", {}).get("healthThreshold", {}).get("interactive", 50) | tojson }};
  Object.entries(initIncidents).forEach(([system, incident]) =>{
    const health = incident?.health ?? 0;
    if ( health >= incidentsThresholdInteractive ) {
      const _system = incidentsmapping?.[system] ?? system;
      if ( !globalMaintenanceSystems.includes(_system) ) globalMaintenanceSystems.push(_system);
    }
  });

  {%- for service_id, service_options in config.frontend_config.get("services", {}).get("options", {}).items() %}

    {%- if pagetype == vars.pagetype_home %}
      {%- for s in spawners %}
        {%- set spawner = user.spawners.get(s.name, s) %}
        {%- if spawner.user_options and spawner.user_options.get("name", false) %}
          if ( !Object.keys(globalUserOptions).includes("{{ service_id }}") ) {
            globalUserOptions["{{ service_id }}"] = {};
          }
          globalUserOptions["{{ service_id }}"]["{{ spawner.name }}"] = {{ frontendCollection.get("decrypted_user_options").get(spawner.name, spawner.user_options) | tojson }};
        {%- endif %}
      {%- endfor %}
    {%- elif pagetype == vars.pagetype_workshop %}
      globalUserOptions["{{ service_id }}"] = {};
      globalUserOptions["{{ service_id }}"]["{{ spawner.name }}"] = {{ spawner.user_options | tojson }};
    {%- endif %}
  {%- endfor %}

  {% include 'macros/table/helpers/systems_js.jinja' with context %}

  Object.entries(serviceConfig)
    .forEach(([key, value]) => {
      const serviceId = value.serviceId ?? key;
      if ( !Object.keys(mappingDict).includes(serviceId) ){
        mappingDict[serviceId] = {
          "serviceKey": key,
          "system": {},
          "option": {}
        };
      }
      Object.entries(value.options).forEach(([optionKey, optionValue]) => {
        mappingDict[serviceId]["option"][optionKey] = optionValue.mapping ?? optionKey;
      });
      _getAllSystems().forEach(system => {
        const backendService = systemConfig[system].backendService;
        const systemType = backendServicesConfig[backendService]?.mapping ?? system;
        if (!Object.keys(mappingDict[serviceId]["system"]).includes(systemType)) {
          mappingDict[serviceId]["system"][system] = systemType;
        }
      });
    });

  function getServiceConfig(serviceId) {
    const key = mappingDict[serviceId]["serviceKey"];
    const userGroups = {{ auth_state.groups | tojson }};
    const all = serviceConfig[key];
    const options = {};
    for ( const [key, value] of Object.entries(all.options) ) {
      if ( value.allowedLists.groups.some( item => userGroups.includes(item) ) ) {
        options[key] = value;
      }
    }
    const sortedOptions = Object.entries(options).sort((a, b) => b[1].weight - a[1].weight)
    const sortedOptionsObj = {};
    for (const [key, value] of sortedOptions) {
      sortedOptionsObj[key] = value;
    }
    all["options"] = sortedOptionsObj;
    return all;
  }

  function val(obj) {
    let ret = "";
    if ( obj.is("input[type='checkbox']") ) {
      ret = obj.prop('checked');
    } else if ( obj.is("select") ) {
      ret = obj.val();
      if ( !Array.isArray(ret) ){
        ret = [ret];
      }
    } else {
      ret = obj.val();
    }
    return ret;
  }

  function getInputElement(serviceId, rowId, elementId) {
    return $(`[id^='${serviceId}-${rowId}-'][id$='-${elementId}-input']`);
  }

  function getLabelCBElement(serviceId, rowId, elementId) {
    return $(`input[id^='${serviceId}-${rowId}-'][id$='-${elementId}-input-cb']`);
  }

  function getInputDiv(serviceId, rowId, elementId) {
    return $(`div[id^='${serviceId}-${rowId}-'][id$='-${elementId}-input-div']`);
  }

  function getLabel(inputElement) {
    return $(`label[for='${inputElement.prop("id")}']`);
  }

  function getInvalidFeedback(inputDiv) {
    return inputDiv.find(".invalid-feedback");
  }

  function getOptionTypes(serviceId, rowId) {
    const options = val(getInputElement(serviceId, rowId, "option"));
    let ret = [];
    options.forEach(option => {
      ret.push(mappingDict[serviceId]?.["option"]?.[option] ?? option);
    });
    return ret;
  }




  {# Fill Input elements -> #}

    function fillSelect(elementId, select, values_, groups = {}, inactive_values = [], inactive_text = "N/A") {
      let values = values_;
      const key = select.attr("name");
      const serviceId = select.attr("data-service");
      const rowId = select.attr("data-row");
      let defaultValue = false;
      {%- if pagetype == vars.pagetype_workshop %}
        const workshopValues = {{ workshop_options | tojson }};
        const dataGroup = select.attr("data-group");
        let allowedValues;
        if ( ["none", "default"].includes(dataGroup) ) {
          allowedValues = workshopValues?.[key] ?? false;
        } else {
          allowedValues = workshopValues?.[dataGroup]?.[key] ?? false;
        }
        defaultValue = workshopValues?.defaultvalues?.[key] ?? false;
        if ( allowedValues ) {
          allowedValues = Array.isArray(allowedValues) ? allowedValues : [allowedValues];
          values = values.filter( ([val,_]) => allowedValues.includes(val));
        }
      {%- endif %}
      const labelElement = $(`label[for='${select.attr("id")}']`);
      const checkBox = labelElement.find("input[type='checkbox']");
      let preValue = select.val();
      select.html("");
      let valueIndex = 0;

      for (const groupLabel in groups) {
        if (groups.hasOwnProperty(groupLabel)) {
          const groupSize = groups[groupLabel];
          select.append(`<optgroup label="${groupLabel}">`);
          for (let i = 0; i < groupSize; i++) {
              if (valueIndex < values.length) {
                  select.append(`<option value="${values[valueIndex][0]}">${values[valueIndex][1]}</option>`);
                  valueIndex++;
              }
          }
          select.append(`</optgroup>`);
        }
      }

      while (valueIndex < values.length) {
        select.append(`<option value="${values[valueIndex][0]}">${values[valueIndex][1]}</option>`);
        valueIndex++;
      }

      // Add a horizontal line if there are inactive options
      if (inactive_values.length > 0) {
          select.append('<hr>');
      }

      // Add inactive options at the end of the dropdown
      inactive_values.forEach(([key, value]) => {
        select.append(`<option value="${key}" disabled>${value} (${inactive_text})</option>`);
      });

      if ( defaultValue && select.find(`option[value="${defaultValue}"]:not(:disabled)`).length) {
        select.val(defaultValue);
      } else if ( preValue && select.find(`option[value="${preValue}"]:not(:disabled)`).length) {
        select.val(preValue);
      } else {
        if ( select.prop("multiple") ) {
          select.val(null);
        } else {
          if (values.length > 0){
            select.val(values[0][0]);
          } else if ( !defaultValue ) {
            console.error(`Could not fill object. Check configuration.`);
            {%- if pagetype == vars.pagetype_workshop %}
            workshopNotUsable(select);
            {%- endif %}
          }
        }
      }
    }

  {# <- Fill Input elements #}
  {%- if pagetype == vars.pagetype_workshop %}
    function workshopNotUsable(element, description="") {
      const helpDiv = $('#workshopnotusable');
      if ( helpDiv.children().length === 0 ) {
        const serviceId = element.attr("data-service");
        const rowId = element.attr("data-row");
        const currentOptions = JSON.stringify(collectSelectedOptions(serviceId, rowId));
        const elementName = element.attr("data-element");
        const workshop = {{ workshop_options | tojson }};
        const defaultValues = {{ workshop_options.get("defaultvalues", {}) | tojson }};
        const workshopId = "{{ spawner.user_options.get("workshop_id", workshop_options.get("workshopid")) }}";
        const allowedSystems = {{ workshop_options.get("system", false) | tojson }};
        
        if ( !description ) {
          if ( Object.keys(defaultValues).includes(elementName) ) {
            description = `${elementName} could not be set to default value "${defaultValues[elementName]}".`;
          } else {
            description = `${elementName} could not be set correctly.`
          }
        }

        const workshopSystems = workshop?.system || [];
        let workshopProject = workshop?.project || [];
        if ( !Array.isArray(workshopProject) ){
          workshopProject = [workshopProject];
        }
        let workshopPartition = workshop?.partition || [];
        if ( !Array.isArray(workshopPartition) ){
          workshopPartition = [workshopPartition];
        }

        var partitionLinkText = "";
        var partitionLinkText2 = "";
        var projectInviteText = "";
        if ( workshopProject.length === 0 ) {
          projectInviteText = `
            <li style="color: #333;">Enter the Project id, that was handed out during the workshop invivation. If in doubt, ask the workshop instructor for the project id.</li>
          `
          partitionLinkText = `
            <li style="color: #333;">Visit <a href="https://judoor.fz-juelich.de" target="_blank">JuDoor</a> and sign in with the credentials you've used to log into here.</li>
            <li style="color: #333;">Click on the project of this workshop.</li>
            <li style="color: #333;">Click on "Request access for resources".</li>
            <img src="{{ static_url("images/workshop/partition_01.png") }}" alt="Login Procedure" style="width: 100%; max-width: 400px; margin-top: 10px; border: 1px solid #ddd; border-radius: 5px;">
          `
        } else {
          workshopProject.forEach(project => {
            projectInviteText += `
              <li style="color: #333;">Enter "${project}" into Project id, add some additional information and clickon "Join project".</li>
            `
          })
          if ( workshopProject.length === 1 ) {
            partitionLinkText = `
              <li style="color: #333;">Visit <a href="https://judoor.fz-juelich.de/projects/${workshopProject[0]}/request" target="_blank">JuDoor</a> and sign in with the credentials you've used to log into here.</li>
              
            `
          } else {
            partitionLinkText = `
              <li style="color: #333;">Visit <a href="https://judoor.fz-juelich.de/" target="_blank">JuDoor</a> and sign in with the credentials you've used to log into here.</li>
              <li style="color: #333;">Click on the projects of this workshop ( ${workshopProject} ). Repeat the "request access for resources" for each project.</li>
              <li style="color: #333;">Click on "Request access for resources".</li>
              <img src="{{ static_url("images/workshop/partition_01.png") }}" alt="Login Procedure" style="width: 100%; max-width: 400px; margin-top: 10px; border: 1px solid #ddd; border-radius: 5px;">
            `
          }
        }

        if ( workshopPartition.length === 0 ) {
          partitionLinkText2 = `
            <li style="color: #333;">Select all partitions.</li>
          `
        } else {
          partitionLinkText2 = `
            <li style="color: #333;">Select these partitions: ${workshopPartition}.</li>
          `
        }
        var missingSystems = _getAllSystems().filter(key => workshopSystems.includes(key));
        var stepLogin = "";
        var stepSystem = "";
        var stepProject = "";
        var stepPartition = "";
          // User doesn't have a access to a single system in the workshop
          // Maybe we can check this in the feature via auth_state entitlements
          stepLogin = `
            <details style="margin-bottom: 15px;">
              <summary style="font-weight: bold; margin-left: 10px; font-size: 16px; color: #0056b3; cursor: pointer;">
                  - Use the correct AAI during the Login process (click here for more information)
              </summary>
              <div style="margin-left: 20px; margin-top: 10px;">
                <p style="color: #333;">When using HPC resources, you have to use the JSC Account during the login process.</p>
                <ul>
                  <li style="color: #333;">Click on <a href="${window.origin}{{ base_url }}logout" target="_blank">Logout</a></li>
                  <li style="color: #333;">Click on <a href="${window.origin}{{ base_url }}login?next=%2Fhub%2Fworkshops%2F${workshopId}" target="_blank">Login</a> (make sure to come back to this page ("/workshops/${workshopId}") after logging in).</li>
                  <ul>
                    <li style="color: #333;">Click on "Sign In"</li>
                    <li style="color: #333;">Click on "Show other sign in options"</li>
                      <img src="{{ static_url("images/workshop/login_01.png") }}" alt="Login Procedure" style="width: 100%; max-width: 400px; margin-top: 10px; border: 1px solid #ddd; border-radius: 5px;">
                    <li style="color: #333;">Click on "Sign in with JSC Account"</li>
                    <li style="color: #333;">Enter your JSC Account credentials and click on Login. Don't have an account yet? Click on register and follow the process. For more information look into the <a href="https://www.fz-juelich.de/en/ias/jsc/services/user-support/how-to-get-access-to-systems/judoor" target="_blank"> JuDoor documentation</a>.</li>
                  </ul>
                </ul>
              </div>
            </details>
          `
          stepProject = `
            <details style="margin-bottom: 15px;">
              <summary style="font-weight: bold; margin-left: 10px; font-size: 16px; color: #0056b3; cursor: pointer;">
                  - Join Projects
              </summary>
              <div style="margin-left: 20px; margin-top: 10px;">
                <p style="color: #333;">When using HPC resources, you have to join a project, before you're allowed to use resources.</p>
                <ul>
                  <li style="color: #333;">Visit <a href="https://judoor.fz-juelich.de" target="_blank">JuDoor</a> and sign in with the credentials you've used to log into here.</li>
                  <li style="color: #333;">Click on "Join a project"</li>
                  <img src="{{ static_url("images/workshop/project_01.png") }}" alt="Join Project" style="width: 100%; max-width: 400px; margin-top: 10px; border: 1px solid #ddd; border-radius: 5px;">
                  ${projectInviteText}
                  <li style="color: #333;">You will receive an email. Follow the steps in this mail.</li>
                  <li style="color: #333;">For more information about joining projects look into the <a href="https://www.fz-juelich.de/en/ias/jsc/services/user-support/how-to-get-access-to-systems/judoor" target="_blank">JuDoor documentation</a></li>
                </ul>                
              </div>
            </details>
          `
        
        stepSystem = `
            <details style="margin-bottom: 15px; ">
              <summary style="font-weight: bold; margin-left: 10px; font-size: 16px; color: #0056b3; cursor: pointer;">
                  - Accept System Usage Policy
              </summary>
              <div style="margin-left: 20px; margin-top: 10px;">
                <p style="color: #333;">When using HPC resources, you have to accept the usage policy of a system, before you're allowed to use resources.</p>
                <ul>
                  <li style="color: #333;">Visit <a href="https://judoor.fz-juelich.de" target="_blank">JuDoor</a> and sign in with the credentials you've used to log into here.</li>
                  <li style="color: #333;">You have to "sign the usage agreement" for the systems you want to use.</li>                  
                  <li style="color: #333;">It may take up to 30 minutes for your account to be fully updated and ready on the system after completing the steps.</li>
                  <li style="color: #333;">For more information look into the <a href="https://www.fz-juelich.de/en/ias/jsc/services/user-support/how-to-get-access-to-systems/judoor" target="_blank">JuDoor documentation</a></li>
                </ul>                
              </div>
            </details>
          `
        stepPartition = `
            <details style="margin-bottom: 15px; ">
              <summary style="font-weight: bold; margin-left: 10px; font-size: 16px; color: #0056b3; cursor: pointer;">
                  - Request access for resources
              </summary>
              <div style="margin-left: 20px; margin-top: 10px;">
                <p style="color: #333;">When using HPC resources, you have to accept the usage policy of a system, before you're allowed to use resources.</p>
                <ul>
                  <li style="color: #333;">Visit <a href="https://judoor.fz-juelich.de" target="_blank">JuDoor</a> and sign in with the credentials you've used to log into here.</li>
                  ${partitionLinkText}
                  ${partitionLinkText2}
                  <li style="color: #333;">Click on "Inform PIs and PAs about your request.</li>
                  <li style="color: #333;">The PI or PA has to accept your request.</li>
                  <li style="color: #333;">It may take up to 30 minutes for your account to be fully updated and ready on the system after completing the steps.</li>
                  <li style="color: #333;">For more information look into the <a href="https://www.fz-juelich.de/en/ias/jsc/services/user-support/how-to-get-access-to-systems/judoor" target="_blank">JuDoor documentation</a></li>
                </ul>                
              </div>
            </details>
          `
        
        
        var genericHtml = `
          <div style="width: 80%; margin: auto; margin-top: 20px; margin-bottom: 20px; padding: 20px; border: 1px solid #ccc; border-radius: 10px; background-color: #f9f9f9;">
            <h2 style="text-align: center; color: #333;">Workshop "${workshop.workshopid}" not available for you.</h2>
            <h4 style="text-align: center; color: #333;">Reason: ${description}</h4>
            <p style="text-align: center; color: #666;">Current options: ${currentOptions}</p>
            <p style="text-align: center; color: #666;">Workshop options: ${JSON.stringify(workshop)}</p>
            <p style="text-align: center; color: #666;">Your account is not yet ready to access this workshop. Please complete the steps below to proceed. Contact your workshop instructor or support, if this does not help</p>
            
            <div style="margin-top: 20px;">
                ${stepLogin}
                ${stepProject}
                ${stepSystem}
                ${stepPartition}
            </div>
            <p style="text-align: center; color: darkorange;">It may take up to 60 minutes for the systems to fully process account updates. Any start attempts during this time might fail.</p>
        </div>
        `
        helpDiv.append(genericHtml);
        $(`#global-content-div`).hide();
      }
    }
  {%- endif %}

  {# Button Helper functions --> #}

    function dictHasKey(obj, key) {
      // Check if the key exists at the current level
      if (Object.hasOwn(obj, key)) {
        return true;
      }

      // Traverse through nested objects or arrays
      for (const k in obj) {
        if (typeof obj[k] === "object" && obj[k] !== null) {
          if (dictHasKey(obj[k], key)) {
            return true;
          }
        }
      }

      // If the key is not found
      return false;
    }

    function validateInput(inputElement) {
      const labelElement = $(`label[for='${inputElement.attr("id")}']`);
      const checkBox = labelElement.find("input[type='checkbox']");
      if ( checkBox.length > 0 && !checkBox.prop("checked") ) {
        return true;
      } else if( !inputElement[0].checkValidity() ) {
        inputElement.addClass('is-invalid');
        inputElement.siblings('.invalid-feedback').show();
        return false;
      } else {
        inputElement.removeClass('is-invalid');
        inputElement.siblings('.invalid-feedback').hide();
        return true;
      }
    }

    function validateSelect(selectElement) {
      const labelElement = $(`label[for='${selectElement.attr("id")}']`);
      const checkBox = labelElement.find("input[type='checkbox']");
      if ( checkBox.length > 0 && !checkBox.prop("checked") ) {
        return true;
      } else if (selectElement.val() === ""       
        || selectElement.val() === undefined)
      {
        selectElement.addClass('is-invalid');
        selectElement.siblings('.invalid-feedback').show();
        return false;
      } else {
        selectElement.removeClass('is-invalid');
        selectElement.siblings('.invalid-feedback').hide();
        return true;
      }
    }

    function validateForm(serviceId, rowId) {
      const form = $(`form[id='${serviceId}-${rowId}-form']`);
      let ret = true;
      form.find(`[id$='-input']:not(:disabled):not([data-collect="false"])`).each(function () {
        let $this = $(this);
        let key = $this.attr("data-element");
        let valid = true;
        if ( notAllowedKeys.includes(key) ){
          console.log(`${key} is not allowed. Choose a different name in configuration`);
          valid = false;
        } else {
          valid = $this.is("input") ? validateInput($this) : $this.is("select") ? validateSelect($this) : false;
        }
        if ( !valid ) {
          console.error("The following element is invalid: ");
          console.log($this);
          // If the user is looking at a different tab, we should highlight the button in the navbar
          const buttonDiv = $(`#${serviceId}-${rowId}-tab-button-div`);
          const activeTab = buttonDiv.find('.active').attr('name');
          const inputTab = $this.attr('data-tab');
          if ( inputTab !== activeTab ){
            buttonDiv.find(`button[data-tab='${inputTab}']`).click();
          }
          ret = false;
        }
      });
      if ( ret ) {
        form.find(`[id$='-input'].is-invalid`).removeClass('is-invalid');
        form.find(`[id$='-input'].invalid-feedback`).hide();
      }
      return ret;
    }

    function homeFillElement(serviceId, rowId, user_options, inputElement) {
      const key = inputElement.attr("data-element");
      const dataGroup = inputElement.attr("data-group");
      const dataType = inputElement.attr("data-type");
      let availableDescription = false;

      let newValue = "";
      let isInUserOptions = false;
      if ( dataType == "multiplecheckbox" ) {
        const dataParent = inputElement.attr("data-parent");
        const elementList = user_options?.[dataGroup]?.[dataParent] ?? [];
        if ( elementList.includes(key) ) {
          newValue = true;
        } else {
          newValue = false;
        }
      } else if ( ["none", "default"].includes(dataGroup) ) {
        newValue = user_options?.[key] ?? "";
      } else {
        newValue = user_options?.[dataGroup]?.[key] ?? "";
      }

      if ( newValue ) {
        isInUserOptions = true;
        if ( dataType == "select" ) {
          if (inputElement.find(`option[value="${newValue}"]`).length > 0) {
            inputElement.val(newValue);
            $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).trigger(`trigger_${key}`);
          } else {
            if ( inputElement.attr("data-element") === "system" && globalMaintenanceSystems.includes(newValue) ) {
              availableDescription = `${key} ${newValue} is currently in maintenace. See footer for more information.`;
            } else {
              availableDescription = `${key} ${newValue} currently not available`;
            }
            console.log(`${key} ${newValue} currently not available`);
          }
        } else if (dataType == "number" ) {
          const min = inputElement.attr("min");
          const max = inputElement.attr("max");
          if (newValue && parseInt(newValue) >= parseInt(min) && parseInt(newValue) <= parseInt(max)) {
            inputElement.val(parseInt(newValue));
            $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).trigger(`trigger_${key}`);
          } else {
            availableDescription = `${key} ${newValue} is not in allowed range [${min}, ${max}].`;
            console.log(`${key} ${newValue} currently not available`);
          }
        } else if (dataType == "checkbox" ) {
          inputElement.prop("checked", true);
          $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).trigger(`trigger_${key}`);
        } else {
          inputElement.val(newValue);
          $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).trigger(`trigger_${key}`);
        }
      } else if (inputElement.is("input[type='checkbox']") ) {
        isInUserOptions = true;
        inputElement.prop("checked", false);
        $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).trigger(`trigger_${key}`);
      }
      if ( isInUserOptions && !availableDescription ) {
        const labelElement = getLabelCBElement(serviceId, rowId, key);
        if ( labelElement.length > 0 ) {
          labelElement.prop("checked", true);
          labelElement.trigger("change");
        }
        if ( ["text", "number"].includes(dataType) ) {
          inputElement.trigger("input");
        } else {
          inputElement.trigger("change");
        }
      }

      return availableDescription;
    }

    function homeFillExistingRow(serviceId, rowId, user_options, fillingOrder) {
      let availableDescription = false;
      // It's important to fill the user options in the right order
      fillingOrder.forEach(key => {
        if ( !availableDescription ) {
          const inputElement = $(`[id^='${serviceId}-${rowId}-'][id$='-${key}-input']`);
          availableDescription = homeFillElement(serviceId, rowId, user_options, inputElement);
        }
      });

      const excludes = `:not(${fillingOrder.map(value => `[data-element='${value}']`).join(',')})`
      const unorderedElements = $(`[id^='${serviceId}-${rowId}-'][id$='-input']${excludes}`);
      unorderedElements.each(function () {
        if ( !availableDescription ) {
          const inputElement = $(this);
          availableDescription = homeFillElement(serviceId, rowId, user_options, inputElement);
        }
      });

      if ( availableDescription ) {
        $(`tr.collapsible-tr[data-server-id='${serviceId}-${rowId}']`).remove();
        $(`#${serviceId}-${rowId}-summary-tr`).attr("data-spawner-na", "true");
        updateHeaderButtons(serviceId, rowId, "na");
        let description = `
          <div id="${serviceId}-${rowId}-config-td-nadescription-div" class="col text-lg-center col-12 col-lg-12">
            <span id="${serviceId}-${rowId}-config-td-nadescription">${availableDescription}</span>
          </div>
        `;
        const headerDescription = $(`#${serviceId}-${rowId}-config-td-div`);
        headerDescription.addClass("justify-content-center");
        $(`#${serviceId}-${rowId}-config-td-div`).html(description);
      }
      const shareId = user_options?.share_id ?? false;
      const r2dId = user_options?.r2d_id ?? false;
      if ( shareId || r2dId ) {
        $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).prop("disabled", true);
        $(`[id^='${serviceId}-${rowId}-'][id$='-input-cb']`).prop("disabled", true);
        $(`button[id^='${serviceId}-${rowId}-'][id$='-view-password']`).prop("disabled", true);
        $(`[id^='${serviceId}-${rowId}-'][id$='-btn']:not([id$='-delete-btn'])`).remove();
      }
    }

    function workshopManagerFillElement(serviceId, rowId, user_options, inputElement) {
      const key = inputElement.attr("data-element");
      const dataGroup = inputElement.attr("data-group");
      const dataType = inputElement.attr("data-type");

      let newValue = "";
      if ( dataType == "multiplecheckbox" ) {
        const dataParent = inputElement.attr("data-parent");
        const elementList = user_options?.[dataGroup]?.[dataParent] ?? [];
        if ( elementList.includes(key) ) {
          newValue = true;
        } else {
          newValue = false;
        }
      } else if ( ["none", "default"].includes(dataGroup) ) {
        newValue = user_options?.[key] ?? "";
      } else {
        newValue = user_options?.[dataGroup]?.[key] ?? "";
      }

      if ( newValue ) {
        if ( dataType == "select" ) {
          inputElement.val(newValue);
          inputElement.trigger("change");
        } else if (dataType == "checkbox" ) {
          inputElement.prop("checked", true);
          inputElement.trigger("change");
        } else {
          inputElement.val(newValue);
          inputElement.trigger("change");
        }
        const labelElement = $(`[id^='${serviceId}-${rowId}-'][id$='-${key}-input-cb']`);
        if ( labelElement && labelElement.length ) {
          labelElement.prop("disabled", false);
          labelElement.prop("checked", true);
          labelElement.trigger("change");
        }
        inputElement.trigger("change");
      } else if (inputElement.is("input[type='checkbox']") ) {
        inputElement.prop("checked", false);
        inputElement.trigger("change");
      }
    }

    function workshopManagerFillExistingRow(serviceId, rowId, workshopDict, fillingOrder) {
      const user_options = workshopDict.user_options;
      fillingOrder.forEach(key => {  
        const inputElement = $(`[id^='${serviceId}-${rowId}-'][id$='-${key}-input']`);
        workshopManagerFillElement(serviceId, rowId, user_options, inputElement);
      })

      const excludes = `:not(${fillingOrder.map(value => `[data-element='${value}']`).join(',')})`
      const unorderedElements = $(`[id^='${serviceId}-${rowId}-'][id$='-input']${excludes}`);

      unorderedElements.each(function () {
        const inputElement = $(this);
        workshopManagerFillElement(serviceId, rowId, user_options, inputElement);
      });

      if ( !isWorkshopInstructor() ) {
        console.log("No Instructor");
        // double check to hide / disable the instructor elements.
        form.find(`input[data-instructor]`).prop("disabled", true);
        form.find(`div[data-instructor="show"][id$="-input-div"]`).hide();
      }
    }

    function workshopFillElement(serviceId, rowId, user_options, inputElement) {      
      const key = inputElement.attr("data-element");
      const dataGroup = inputElement.attr("data-group");
      const dataType = inputElement.attr("data-type");

      let newValue = "";
      let isInUserOptions = false;
      let availableDescription = "";
      if ( dataType == "multiplecheckbox" ) {
        const dataParent = inputElement.attr("data-parent");
        const elementList = user_options?.[dataGroup]?.[dataParent] ?? [];
        if ( elementList.includes(key) ) {
          newValue = true;
        } else {
          newValue = false;
        }
      } else if ( ["none", "default"].includes(dataGroup) ) {
        newValue = user_options?.[key] ?? "";
      } else {
        newValue = user_options?.[dataGroup]?.[key] ?? "";
      }

      if ( Array.isArray(newValue) ) {
        newValue = user_options?.default_values?.key ?? newValue[0];
      }

      if ( newValue ) {
        isInUserOptions = true;        
        if ( dataType == "select" ) {
          if (inputElement.find(`option[value="${newValue}"]`).length > 0) {
            inputElement.val(newValue);
            $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).trigger(`trigger_${key}`);
          } else {
            if ( inputElement.attr("data-element") === "system" && globalMaintenanceSystems.includes(newValue) ) {
              availableDescription = `${key} ${newValue} is currently in maintenace. See footer for more information.`;
            } else {
              availableDescription = `${key} ${newValue} not available for the current options.`;
            }
            console.log(`${key} ${newValue} currently not available`);
          }
        } else if ( dataType == "number" ) {
          const min = inputElement.attr("min");
          const max = inputElement.attr("max");
          if (
              newValue &&
              (min === undefined || newValue >= min) &&
              (max === undefined || newValue <= max)
          ) {
            inputElement.val(newValue);
            $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).trigger(`trigger_${key}`);
          } else {
            availableDescription = `${key} ${newValue} is not in allowed range [${min}, ${max}].`;
            console.log(`${key} ${newValue} currently not available`);
            console.log(availableDescription);
          }
        } else if (dataType == "checkbox" ) {
          inputElement.prop("checked", true);
          $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).trigger(`trigger_${key}`);
        } else {
          inputElement.val(newValue);
          $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).trigger(`trigger_${key}`);
        }      
      } else if (inputElement.is("input[type='checkbox']") ) {
        isInUserOptions = true;
        inputElement.prop("checked", false);
        $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).trigger(`trigger_${key}`);
      }
      if ( isInUserOptions && !availableDescription ) {
        const labelElement = $(`[id^='${serviceId}-${rowId}-'][id$='-${key}-input-cb']`);
        if ( labelElement && labelElement.length ) {
          labelElement.prop("disabled", true);
          labelElement.prop("checked", true);
          labelElement.trigger("change");
        }

        if ( ["text", "number"].includes(dataType) ) {
          inputElement.prop("disabled", true);
          inputElement.attr("data-alwaysdisabled", "true");
          inputElement.trigger("input");
        } else {
          inputElement.trigger("change");
        }
      }
      return availableDescription;
    }

    function workshopFillExistingRow(serviceId, rowId, user_options, fillingOrder) {
      {%- if pagetype == vars.pagetype_workshop %}
        const defaultValues = {{ workshop_options.get("defaultvalues", {}) | tojson }};
      {%- else %}
        const defaultValues = {};
      {%- endif %}
      const excludes = `:not(${fillingOrder.map(value => `[data-element='${value}']`).join(',')})`
      const unorderedElements = $(`[id^='${serviceId}-${rowId}-'][id$='-input']${excludes}`);
      let availableDescription = "";

      fillingOrder.forEach(key => {
        if ( !availableDescription ) {
          const inputElement = $(`[id^='${serviceId}-${rowId}-'][id$='-${key}-input']`);
          availableDescription = workshopFillElement(serviceId, rowId, user_options, inputElement);
          const elementName = inputElement.attr("data-element");
          const dataType = inputElement.attr("data-type");
          if ( Object.keys(defaultValues).includes(elementName) ) {
            if ( ["text", "number"].includes(dataType) ) {
              inputElement.val(defaultValues[elementName]);
              inputElement.trigger("input");
            } else if ( ["select"].includes(dataType) ) {
              if (inputElement.find(`option[value="${defaultValues[elementName]}"]`).length > 0) {
                inputElement.val(defaultValues[elementName]);
                inputElement.trigger("change");
              }
            } else {
              inputElement.trigger("change");
            }
            $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).trigger(`trigger_${elementName}`);
          }
        }
      });
      unorderedElements.each(function () {
        if ( !availableDescription ) {
          const inputElement = $(this);
          availableDescription = workshopFillElement(serviceId, rowId, user_options, inputElement);
          const elementName = inputElement.attr("data-element");
          const dataType = inputElement.attr("data-type");
          if ( Object.keys(defaultValues).includes(elementName) ) {
            inputElement.val(defaultValues[elementName]);
            if ( ["text", "number"].includes(dataType) ) {
              inputElement.trigger("input");
            } else {
              inputElement.trigger("change");
            }
            $(`[id^='${serviceId}-${rowId}-'][id$='-input']`).trigger(`trigger_${elementName}`);
          }
        }
      });
    }

    function collectWorkshopOptions(serviceId, rowId) {
      const form = $(`form[id='${serviceId}-${rowId}-form']`);
      const options = {};
      form.find(`input[data-group="none"][id$='-input'], input[data-group="none"][id$='-cb-input']`).each(function () {
        const $this = $(this);
        let value = "";
        if ( !$this.prop("disabled") || $this.attr('data-group') === "none" ) {
          if ( $this.is("input[type='checkbox']") ){
            value = $this.prop('checked');
          } else {
            value = $this.val();
          }
          options[$this.attr('name')] = value;
        }
      });
      return options;
    }

    function collectSelectedOptions(serviceId, rowId, allCheckboxes=false) {
      const form = $(`form[id='${serviceId}-${rowId}-form']`);
      let ret = {};
      let secret_keys = [];
      // collect all inputs in default group
      form.find(`[id^='${serviceId}-${rowId}-'][id$='-input'][data-collect="true"]:not([data-group="none"])`).each(function () {
        let $this = $(this).first();
        let dataGroupValue = $this.attr('data-group');
        let value = "";
        let addValue = true;
        let id = $this.prop("id");
        let labelInput = $(`#${id}-cb`);
        let parent = $this.attr("data-parent");
        let name = parent || $this.attr("name");
        let secret = $this.attr("data-secret");
        if ( secret == "true" ) {
          secret_keys.push(name);
        }
        if ( addValue ) {
          if ( labelInput.length > 0 && !labelInput.prop('checked') ) {
            addValue = false;
          } else {
            if ( $this.is("input[type='checkbox']") ){
              value = $this.prop('checked');
              if ( allCheckboxes && !parent ) {
                addValue = true;
              } else if ( parent && value ) {
                addValue = true;
              } else if ( value ) {
                addValue = true;
              } else {
                addValue = false;
              }
            } else {
              value = $this.val();
            }
          }
        }

        if ( addValue ) {
          if ( dataGroupValue === "default" ) {
            if ( parent ) {
              if ( !Object.keys(ret).includes(name) ) {
                ret[name] = [];
              }
              ret[name].push($this.attr("name"))
            } else {
              ret[name] = value;
            }            
          } else if ( dataGroupValue === "defaultvalues" ) {
            if (!Object.keys(ret).includes(dataGroupValue)) {
              ret[dataGroupValue] = {}
            }
            ret[dataGroupValue][name] = value;
          } else if ( dataGroupValue != "none" ) {
            if (!Object.keys(ret).includes(dataGroupValue)) {
              ret[dataGroupValue] = {}
            }
            if ( parent ) {
              if ( !Object.keys(ret[dataGroupValue]).includes(name) ) {
                ret[dataGroupValue][name] = [];
              }
              ret[dataGroupValue][name].push($this.attr("name"))
            } else {
              ret[dataGroupValue][name] = value;
            }
          }
        }
      });
      let profile = "";
      if ( Object.keys(ret).includes("option") ) profile = ret.option;
      else profile = serviceId;
      ret["profile"] = profile;
      ret["service"] = serviceId;

      if ( !Object.keys(ret).includes("name") || !ret?.name ) {
        ret["name"] = `Unnamed ${serviceId}`;
      }
      {%- if pagetype == vars.pagetype_workshop %}
      ret["workshop_id"] = "{{ workshop_options.get("workshopid") }}";
      {%- endif %}
      const shareId = globalUserOptions?.[serviceId]?.[rowId]?.["share_id"] ?? false;
      if ( shareId ) {
        ret["share_id"] = shareId;
      }
      const r2dId = globalUserOptions?.[serviceId]?.[rowId]?.["r2d_id"] ?? false;
      if ( r2dId ) {
        ret["r2d_id"] = r2dId;
      }
      ret["secret_keys"] = secret_keys;

      // Do not collect reservation = None
      if ( ret.resources && ret.resources.reservation === "None") {
        delete ret.resources.reservation;
        
        // If "resources" is now empty, remove it as well
        if (Object.keys(ret.resources).length === 0) {
          delete ret.resources;
        }
      }

      console.log("Collected Options in frontend:");
      console.log(ret);
      return ret;
    }

  {# <-- Button Helper functions #}

  {# Workshop Manager --> #}
    {# WorkshopManager.helper --> #}
    function isWorkshopInstructor() {
      {%- if is_instructor %}
        return true;
      {%- else %}
        return false;
      {%- endif %}
    }

    function isFirstRow(rowId) {
      return rowId === "{{ vars.first_row_id }}";
    }
    {# <-- WorkshopManager.helper #}

    {# WorkshopManager.none.workshopid --> #}
      function wmTriggerWorkshopid(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
          const $this = $(`input[id^="${serviceId}-${rowId}-"][id$="-${elementId}-input"]`);
          if ( !isFirstRow(rowId) ){
            $this.val(rowId);        
          } else {
            if ( isWorkshopInstructor() ) {
              $this.prop("disabled", false);
              $this.prop("placeholder", elementOptions?.["input"]?.["options"]?.["placeholderInstructor"] || "W");
            }
          }
      }
    {# <-- WorkshopManager.none.workshopid #}

    {# WorkshopManager.default.option --> #}
      function homeTriggerOption(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        let values = getServiceConfig(serviceId).options;
        
        {%- if pagetype == vars.pagetype_workshop %}
          {# Only allow options, which are available for the selected systems #}
          let allowedSystems = {{ workshop_options.get("system", false) | tojson }};
          if ( allowedSystems ) {
            if ( !Array.isArray(allowedSystems) ){
              allowedSystems = [allowedSystems];
            }
            let allowedOptions = {};
            for ( const [key, valueInformation] of Object.entries(values) ) {
              allowedSystems.forEach(system => {
                const systemsPerOption = getServiceConfig(serviceId)?.options?.[key]?.allowedLists?.systems ?? [];
                if ( systemsPerOption.includes(system) && !allowedOptions.hasOwnProperty(key) ) {
                  allowedOptions[key] = valueInformation;
                }
              });
            }
            values = allowedOptions;
          }
        {% elif pagetype == vars.pagetype_home %}
          let allowedSystems = _getAllSystems();
          if ( !Array.isArray(allowedSystems) ){
            allowedSystems = [allowedSystems];
          }
          let allowedOptions = {};
          for ( const [key, valueInformation] of Object.entries(values) ) {
            allowedSystems.forEach(system => {
              const systemsPerOption = getServiceConfig(serviceId)?.options?.[key]?.allowedLists?.systems ?? [];
              if ( systemsPerOption.includes(system) && !allowedOptions.hasOwnProperty(key) ) {
                allowedOptions[key] = valueInformation;
              }
            });
          }
          values = allowedOptions;
        {%- endif %}

        const optionInput = $(`#${serviceId}-${rowId}-${tabId}-option-input`);
        let _values = Object.entries(values).map(([key, value]) => [key, value.name]);
        if ( _values.length == 0 ){
          _values = [["none", "No Option available. Please contact support"]];
        }
        fillSelect("init", optionInput, _values, {}, [], "N/A");
      }
      
      function wmTriggerOption(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerOption(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }

      function wTriggerOption(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerOption(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }
    {# <-- WorkshopManager.default.option #}

    {# WorkshopManager.default.system --> #}

      function shortenRepoUrl(repotype, repourl) {
        const wwwPrefix = ["www.", ""];
        const protocols = ["https://", "http://", ""];
        let domain = "";
        let url = repourl;
        if ( repotype == "gh" ) {
          domain = "github.com";
        } else if ( repotype == "gist" ) {
          domain = "gist.github.com";
        } else if ( repotype == "gitlab" ) {
          domain = "gitlab.com";
        } else if ( repotype == "zenodo" ) {
          domain = "doi.org";
        }
        let suffix = "";
        if ( domain ) {
          protocols.forEach(protocol => {
            wwwPrefix.forEach(www => {
              suffix = `${protocol}${www}${domain}/`;
              if ( url.startsWith(suffix) ) url = url.slice(suffix.length);
            })
          });
        }
        return url;
      }

      function getRepo2DockerDirectLink(serviceId, rowId) {
        const repotype = $(`[id^='${serviceId}-${rowId}-'][id$='-repotype-input']`).val();

        let urlpath = `/v2/${repotype}`
        let repourl = $(`[id^='${serviceId}-${rowId}-'][id$='-repourl-input']`).val();

        if ( ["git", "gl", "hydroshare", "ckan"].includes(repotype) ) {
          repourl = encodeURIComponent(repourl);
        }
        repourl = shortenRepoUrl(repotype, repourl);
        urlpath = `${urlpath}/${repourl}/`;

        let reporefElement = $(`[id^='${serviceId}-${rowId}-'][id$='-reporef-input']`);

        if ( ["git", "gl", "gh", "gist"].includes(repotype) ) {
          reporef = reporefElement.val() || "HEAD";
          urlpath = `${urlpath}${reporef}`;
        }

        let queryArgs = [];
        
        const repopathElement = $(`[id^='${serviceId}-${rowId}-'][id$='-repopath-input']`);
        if ( repopathElement.attr("data-collect") == "true" ) {
          const repopathtype = $(`[id^='${serviceId}-${rowId}-'][id$='-repopathtype-input']`).val();
          if ( repopathtype == "file" ) {
            let labpath = $(`[id^='${serviceId}-${rowId}-'][id$='-repopath-input']`).val();
            labpath = encodeURIComponent(labpath);
            queryArgs.push(`labpath=${labpath}`);
          } else if ( repopathtype == "url" ) {
            let urlpath = $(`[id^='${serviceId}-${rowId}-'][id$='-repopath-input']`).val();
            urlpath = encodeURIComponent(urlpath);
            queryArgs.push(`urlpath=${urlpath}`);
          }
        }

        const system = $(`[id^='${serviceId}-${rowId}-'][id$='-system-input']`).val();
        queryArgs.push(`system=${system}`);

        const flavorElement = $(`[id^='${serviceId}-${rowId}-'][id$='-flavor-input']`);
        if ( flavorElement.attr("data-collect") == "true" ) {
          queryArgs.push(`flavor=${flavorElement.val()}`);
        }

        const localstoragepathElement = $(`[id^='${serviceId}-${rowId}-'][id$='-localstoragepath-input']`);
        if ( localstoragepathElement.attr("data-collect") == "true" ) {
          let localstoragepath = encodeURIComponent(localstoragepathElement.val());
          queryArgs.push(`localstoragepath=${localstoragepath}`);
        }

        let queryString = queryArgs.join("&");
        urlpath = window.origin + `${urlpath}?${queryString}`;
        urlpath = urlpath.replace(/([^:]\/)\/+/g, "$1");
        return urlpath;
      }

      function homeTriggerUpdateDirectLinks(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const directUrl = getRepo2DockerDirectLink(serviceId, rowId);
        const inputElement = $(`[id^='${serviceId}-${rowId}-'][id$='-${elementId}-input']`);
        inputElement.val(directUrl);
      }

      function repoUrlChanged(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const repoType = $(`[id^='${serviceId}-${rowId}-'][id$='-repotype-input']`);
        const repoUrl = $(`[id^='${serviceId}-${rowId}-'][id$='-${tabId}-${elementId}-input']`);
        value = shortenRepoUrl(repoType.val(), repoUrl.val());
        if ( value ) {
          repoUrl.val(value);
        }
      }

      function wTriggerUpdateRepoUrlForType(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerUpdateRepoUrlForType(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }

      function wmTriggerUpdateRepoUrlForType(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerUpdateRepoUrlForType(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }

      function homeTriggerUpdateRepoUrlForType(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const repoUrlElement = $(`[id^='${serviceId}-${rowId}-'][id$='-${elementId}-input']`);
        const repoUrlLabelElement = getLabel(repoUrlElement);
        const repoType = $(`[id^='${serviceId}-${rowId}-'][id$='-repotype-input']`).val();

        let label = "";
        let placeholder = "";
        let regex = "";
        if ( repoType === "gh" ) {
          label = "GitHub repository name or URL";
          placeholder = "example: yuvipanda/requirements or https://github.com/yuvipanda/requirements";
          regex = "^(https?:\\/\\/github\\.com\\/)?([^\\/]+\\/[^\\/]+)\\/?$";
        } else if ( repoType === "gist" ) {
          label = "Gist ID (username/gistId) or URL";
          placeholder = "example: kreuzert/1ce821fe9ba45a636a504a32a87bb49c or https://gist.github.com/kreuzert/1ce821fe9ba45a636a504a32a87bb49c";
          regex = "^(https?:\\/\\/gist\\.github\\.com\\/)?([^\\/]+)\\/?$";
        } else if ( repoType === "git" ) {
          label = "Arbitrary git repository URL";
          placeholder = "example: http://git.example.com/repo";
        } else if (repoType === "gl") {
          label = "GitLab repository name or URL";
          placeholder = "example: https://gitlab.com/mosaik/examples/mosaik-tutorials-on-binder or mosaik/examples/mosaik-tutorials-on-binder";
          regex = "^(https?:\\/\\/gitlab\\.com\\/)?([^\\/]+\\/[^\\/]+)\\/?$";
        } else if ( repoType === "zenodo" ) {
          label = "Zenodo DOI";
          placeholder = "example: 10.5281/zenodo.3242074";
        } else if ( repoType === "figshare" ) {
          label = "FigShare DOI";
          placeholder = "example: 10.6084/m9.figshare.9782777.v1";
        } else if ( repoType === "hydroshare" ) {
          label = "Hydroshare resource id";
          placeholder = "example: 8f7c2f0341ef4180b0dbe97f59130756";
        } else if ( repoType === "dataverse" ) {
          label = "Dataverse DOI";
          placeholder = "example: 10.7910/DVN/TJCLKP";
        } else if ( repoType === "ckan" ) {
          label = "CKAN dataset URL";
          placeholder = "https://demo.ckan.org/dataset/smaple-dataset-1";
        }

        repoUrlLabelElement.contents().filter(function () {
          return this.nodeType === Node.TEXT_NODE;
        }).first().replaceWith(label);

        repoUrlElement.prop("placeholder", placeholder);
        if (regex) {
          repoUrlElement.attr("pattern", regex);
        } else {
          repoUrlElement.removeAttr("pattern");
        }
      }


      function homeTriggerSystem(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const optionInput = $(`#${serviceId}-${rowId}-${tabId}-option-input`);
        const systemInput = $(`#${serviceId}-${rowId}-${tabId}-system-input`);

        const options = val(optionInput);

        if ( optionInput.prop("disabled") ){
          // If option is disabled -> make all systems available
          fillSelect(elementId, systemInput, _getAllSystems().map(item => [item, item]));
        } else {
          // Update available systems
          let inactiveText = "N/A"
          let displayNames = [];
          options.forEach(option => {
            if (getServiceConfig(serviceId)?.options && Object.keys(getServiceConfig(serviceId)?.options).includes(option) ) {
              displayNames.push(getServiceConfig(serviceId).options[option].name);
            }
          })
          let displayName = displayNames.join(", ");
          inactiveText = `N/A for ${displayName}`

          fillSelect(elementId, systemInput, getAvailableSystemOptions(serviceId, options), {}, getMissingSystemOptions(serviceId, rowId, options), inactiveText);
        }
      }

      function wmTriggerSystem(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerSystem(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }

      function wTriggerSystem(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerSystem(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }

    {# <-- WorkshopManager.default.system #}

    {# WorkshopManager.default.unicore.project --> #}
      function homeTriggerProject(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const values = getProjectOptions(serviceId, rowId);
        const inputElement = getInputElement(serviceId, rowId, "project");
        fillSelect(elementId, inputElement, values);
      }

      function wmTriggerProject(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerProject(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }

      {%- if pagetype == vars.pagetype_workshop %}
        function wTriggerProject(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
          let values = getProjectOptions(serviceId, rowId);
          const presetValues = {{ workshop_options.get("hpc", {}).get("project", false) | tojson }};
          if ( presetValues ) {
            values = values.filter( ([item, _]) => presetValues.includes(item));
          }
          const inputElement = getInputElement(serviceId, rowId, "project");
          fillSelect(elementId, inputElement, values);
        }
      {%- endif %}
    {# WorkshopManager.default.unicore.project --> #}

    {# WorkshopManager.default.unicore.partition --> #}
      function homeTriggerPartition(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const [partitions, interactivePartitionsLength] = getPartitionAndInteractivePartition(serviceId, rowId);
        const inputElement = getInputElement(serviceId, rowId, "partition");
        fillSelect(elementId, inputElement, partitions, {"Login Nodes": interactivePartitionsLength, "Compute Nodes": -1});
      }
      function wmTriggerPartition(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerPartition(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }
      function wTriggerPartition(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerPartition(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }
    {# <-- WorkshopManager.default.unicore.partition #}

    {# WorkshopManager.default.unicore.reservation --> #}
      function toggleCollectCB(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const labelChecked = val(getLabelCBElement(serviceId, rowId, elementId));
        const inputDiv = getInputDiv(serviceId, rowId, elementId);
        const inputElement = getInputElement(serviceId, rowId, elementId);
        if ( !inputElement.is(":visible") ) {
          inputElement.attr("data-collect", false);
        } else {
          if ( labelChecked ) {
            inputElement.attr("data-collect", true);
          } else {
            inputElement.attr("data-collect", false);
          }
        }
      }

      function enableStartButton(serviceId, rowId) {
        const summaryStartButton = $(`#${serviceId}-${rowId}-start-btn-header`);
        const startButton = $(`#${serviceId}-${rowId}-startgreen-btn`);
        if ( summaryStartButton.length > 0 ) {
          summaryStartButton.prop("disabled", false);
        }
        if ( startButton.length > 0 ) {
          startButton.prop("disabled", false);
        }
      }

      function disableStartButton(serviceId, rowId) {
        const summaryStartButton = $(`#${serviceId}-${rowId}-start-btn-header`);
        const startButton = $(`#${serviceId}-${rowId}-startgreen-btn`);
        if ( summaryStartButton.length > 0 ) {
          summaryStartButton.prop("disabled", true);
        }
        if ( startButton.length > 0 ) {
          startButton.prop("disabled", true);
        }
      }

      // When reservation selected is inactive, we disable the start button
      // If we switch the option or system, we will never trigger "reservationChanged",
      // that's why we observe data-collect of Reservation
      function homeTriggerReservationObserveCollect(element, newValue) {
        if ( newValue === "false" ) {
          const serviceId = element.attr("data-service");
          const rowId = element.attr("data-row");
          enableStartButton(serviceId, rowId);
        }
      }

      function wTriggerReservationObserveCollect(element, newValue) {
        homeTriggerReservationObserveCollect(element, newValue)
      }

      function homeTriggerReservation(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const systemInput = getInputElement(serviceId, rowId, "system");
        const elementDiv = getInputDiv(serviceId, rowId, elementId);
        const reservationInput = getInputElement(serviceId, rowId, elementId);
        
        let reservations = getReservationOptions(serviceId, rowId);
        
        {%- if pagetype == vars.pagetype_workshop %}          
          const workshopValues = {{ workshop_options | tojson }};
          {# Only allow options, which are available for the selected systems #}
          let allowedReservations = workshopValues?.reservation ?? false;
          if ( allowedReservations ) {
            if ( !Array.isArray(allowedReservations) ){
              allowedReservations = [allowedReservations];
            }
            let forcedreservations = [];
            const currentSystem = val(getInputElement(serviceId, rowId, "system"));
            if ( currentSystem.length === 1 && currentSystem[0] && unicoreReservations.hasOwnProperty(currentSystem[0]) ) {
              allowedReservations.forEach(singleWorkshopReservation => {
                let singleWorkshopToAdd = unicoreReservations[currentSystem[0]].filter(item => item.ReservationName == singleWorkshopReservation);
                if ( singleWorkshopToAdd.length === 1 ) {
                  forcedreservations.push(singleWorkshopToAdd[0]);
                }
              });
            }
            reservations = forcedreservations;
            reservationInput.attr("data-collect", true);
          }
        {%- endif %}
        if ( !systemInput.prop("disabled") ) {
          
          activeReservationNames = reservations
            .filter(item => item.State === "ACTIVE")
            .map(item => [item.ReservationName, item.ReservationName]);
          inactiveReservationNames = reservations
            .filter(item => item.State === "INACTIVE")
            .map(item => [item.ReservationName, item.ReservationName]);

          let groups = {}
          {%- if pagetype == vars.pagetype_workshop and "None" not in workshop_options.get("resources", {}).get("reservation", ["None"]) %}
            const allReservationsSorted = [
              ...activeReservationNames,
              ...inactiveReservationNames
            ];
            groups["No reservation"] = 0;
          {%- else %}
            const allReservationsSorted = [
              ["None", "None"],
              ...activeReservationNames,
              ...inactiveReservationNames
            ];
            groups["No reservation"] = 1;
          {%- endif %}
          
          if ( activeReservationNames.length > 0 ) {
            groups["Active"] = activeReservationNames.length;
          }
          if ( inactiveReservationNames.length > 0 ) {
            groups["Inactive"] = inactiveReservationNames.length;
          }          
          fillSelect(elementId, reservationInput, allReservationsSorted, groups);
          const reservation = reservationInput.val();
          inactiveReservationNames.filter( item => item[0] === reservation ).length > 0 ? disableStartButton(serviceId, rowId) : enableStartButton(serviceId, rowId);
        } else {
          $(`div[id^='${serviceId}-${rowId}-'][id$='-reservationinfo-input-div']`).hide();        
        }
      }

      function wmTriggerReservation(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerReservation(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }

      function wTriggerReservation(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerReservation(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }

      function wmTriggerDefaultValue(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const dependentElement = elementOptions?.input?.options?.parent || "";
        if ( !dependentElement ) {
          console.log(`Custom Config not configured correctly for ${elementId}. Add "parent" to elementOptions.`);
        }

        const selectedParentValues = $(`select[id^='${serviceId}-${rowId}-'][id$='-${dependentElement}-input']`).val();
        const parentLabelCB = $(`input[id^='${serviceId}-${rowId}-'][id$='-${dependentElement}-input-cb']`);
        const inputParentElement = $(`select[id^='${serviceId}-${rowId}-'][id$='-${dependentElement}-input']`);

        const inputElement = $(`select[id^='${serviceId}-${rowId}-'][id$='-${elementId}-input']`);
        const labelCB = $(`input[id^='${serviceId}-${rowId}-'][id$='-${elementId}-input-cb']`);
        const inputDiv = $(`div[id^='${serviceId}-${rowId}-'][id$='-${elementId}-input-div']`);

        if ( parentLabelCB.prop("checked") && inputParentElement.attr("data-collect") && selectedParentValues.length > 1 ) {
          fillSelect(elementId, inputElement, selectedParentValues.map(item => [item, item]));
          inputDiv.show();
          if ( labelCB.prop("checked") && inputParentElement.attr("data-collect") === "true") {
            inputElement.attr("data-collect", true);
          } else {
            inputElement.attr("data-collect", false);
          }
        } else {
          inputDiv.hide();
          inputElement.attr("data-collect", false);
        }
      }

      function homeTriggerReservationInfo(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const reservation_values = val(getInputElement(serviceId, rowId, "reservation"));
        let reservation = "None";
        if ( reservation_values.length > 0 ){
          reservation = reservation_values[0];
        }
        const reservationInfoDiv = $(`[id^='${serviceId}-${rowId}-'][id$='-reservationinfo-input-div']`);
        if ( !reservation || reservation === "None" ) {
          reservationInfoDiv.hide();
        } else {
          const currentSystem = val(getInputElement(serviceId, rowId, "system"));
          if ( currentSystem.length === 1 && currentSystem[0] && unicoreReservations.hasOwnProperty(currentSystem[0])) {
            const reservations = unicoreReservations[currentSystem[0]].filter(item => item.ReservationName == reservation);
            for (const reservationInfo of reservations) {
              if (reservationInfo.ReservationName == reservation) {
                reservationInfoDiv.find(`span[id$="-start"]`).html(`${reservationInfo.StartTime} (Europe/Berlin)`);
                reservationInfoDiv.find(`span[id$="-end"]`).html(`${reservationInfo.EndTime} (Europe/Berlin)`);
                reservationInfoDiv.find(`span[id$="-state"]`).html(reservationInfo.State);
                reservationInfoDiv.find(`pre[id$="-details"]`).html(JSON.stringify(reservationInfo, null, 2));
                if ( reservationInfo.State == "INACTIVE" ) {
                  reservationInfoDiv.find(`span[id$="-state"]`).css("color", "red");
                } else {
                  reservationInfoDiv.find(`span[id$="-state"]`).css("color", "green");
                }
              }
            }
            reservationInfoDiv.show();
          } else {
            reservationInfoDiv.hide();
          }
        }
      }

      function wTriggerReservationInfo(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerReservationInfo(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }
    {# <-- WorkshopManager.default.unicore.reservation #}


    {# WorkshopManager.default.unicore.nodesRuntimeGPUXservers --> #}
      function homeTriggerResources(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const systems = getUnicoreValues(serviceId, rowId, "system");
        const partitions = getUnicoreValues(serviceId, rowId, "partition");
        let _partitions = [];

        const labelOptions = elementOptions.label ?? {};

        const inputDiv = getInputDiv(serviceId, rowId, elementId);
        const inputElement = getInputElement(serviceId, rowId, elementId);      
        const labelElement = getLabel(inputElement);
        const labelElementCBValue = val(getLabelCBElement(serviceId, rowId, elementId));
        const invalidFeedback = getInvalidFeedback(inputDiv);

        let minmaxavail = false;
        let min = -1;
        let max = -1;
        let label = (labelOptions.value === undefined || labelOptions.value === null) ? "No Label" : labelOptions.value;
        let show = false;
        let defaultValue = 1;
        let collectInformation = true;

        if ( collectInformation ){
          systems.forEach(system => {
            if (partitions.length === 1 && partitions[0] === "_all_") {
              _partitions = Object.keys(resourcesConfig[system] ?? {});
            } else {
              _partitions = partitions;
            }
            _partitions.forEach(partition => {
              const elementOptions = resourcesConfig[system]?.[partition]?.[elementId] ?? {};
              if (Object.keys(elementOptions).length !== 0 ) {
                show = true;
                const minmax = elementOptions.minmax || false;
                defaultValue = (elementOptions["default"] === undefined || elementOptions["default"] === null) ? defaultValue : elementOptions["default"];                
                if ( minmax ) {
                  if ( !minmaxavail ) {
                    minmaxavail = true;
                    min = minmax[0];
                    max = minmax[1];
                  } else {
                    if ( minmax[0] < min ){
                      min = minmax[0];
                    }
                    if ( minmax[1] > max ){
                      max = minmax[1];
                    }
                  }
                }
              }
            });
          });
        }
        if ( show ) {
          if ( !collectInformation ) {
            label = `${label} [${defaultValue}]`;
            invalidFeedback.html(`Value ${defaultValue} was chosen by workshop instructor.`)
            inputElement.attr("min", min);
            inputElement.attr("max", max);
          } else if ( minmaxavail ){
            label = `${label} [${min}, ${max}]`;
            invalidFeedback.html(`Please choose a number between ${min} and ${max}.`);
            inputElement.attr("min", min);
            inputElement.attr("max", max);
          } else {
            invalidFeedback.html("Please choose a valid number.");
            inputElement.removeAttr("min");
            inputElement.removeAttr("max");
          }
          if ( inputElement.attr("data-alwaysdisabled") != "true" ) {
            inputElement.attr("value", defaultValue);
          }

          labelElement.contents().filter(function () {
            return this.nodeType === Node.TEXT_NODE;
          }).first().replaceWith(label);

          // Checkbox logic
          const checkBoxElement = labelElement.find("input[type='checkbox']");
          if ( checkBoxElement.length !== 0 ) {
            const checkBoxDefault = labelOptions?.options?.default ?? false;
            checkBoxElement.prop("checked", checkBoxDefault);
            inputElement.prop("disabled", !checkBoxDefault);
          } else {
            if ( inputElement.attr("data-alwaysdisabled") != "true" ) {
              inputElement.prop("disabled", false);
            }
          }
          inputDiv.show();
          if ( labelElementCBValue !== undefined ) {
            inputElement.attr("data-collect", labelElementCBValue);
          } else {
            inputElement.attr("data-collect", true);
          }
          {%- if pagetype == vars.pagetype_workshop %}          
            const workshopValues = {{ workshop_options | tojson }}
            if ( Object.keys(workshopValues).includes(elementId) ){
              console.log(`Yeah - ${elementId} is defined`);
            } 
          {%- endif %}
        } else {
          inputDiv.hide();
          inputElement.attr("data-collect", false);
        }
      }
    {# <-- WorkshopManager.default.unicore.nodesRuntimeGPUXservers #}

    function wmTriggerResources(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
      homeTriggerResources(trigger, serviceId, rowId, tabId, elementId, elementOptions);
    }
    function wTriggerResources(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
      homeTriggerResources(trigger, serviceId, rowId, tabId, elementId, elementOptions);
    }

    {# WorkshopManager.default.kube.flavor --> #}
      function homeTriggerFlavor(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const systems = val(getInputElement(serviceId, rowId, "system"));

        if ( systems.some(item => kubeFlavorSystems.includes(item)) ) {
          let availableFlavors = getAvailableKubeFlavorsS(systems);
          let unavailableFlavors = getUnavailableKubeFlavorsS(systems);
          if ( availableFlavors.length == 0 ) {
            availableFlavors = [["_undefined", "Couldn't receive flavors. Please re-login to use this system"]];
          }

          const selectInput = getInputElement(serviceId, rowId, "flavor");
          fillSelect(elementId, selectInput, availableFlavors, {}, unavailableFlavors, "maximum reached");
        }
      }

      function wmTriggerFlavor(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerFlavor(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }

      function wTriggerFlavor(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerFlavor(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }
    {# <-- WorkshopManager.default.kube.flavor #}

    
    {# Workshop.labconfig.flavorinfo --> #}
      function setFlavorInfo(serviceId, rowId, system, flavors={}) {
        const inputDiv = $(`div[id^='${serviceId}-${rowId}-'][id$='-flavorinfo-input-div']`);
        inputDiv.empty();
        if ( system ) {
          let allFlavors = flavors;
          if ( allFlavors != undefined ) {
            allFlavors = kubeOutpostFlavors[system];
          }
          if ( allFlavors ){
            for (const [_, description] of Object.entries(allFlavors)
              .filter(([key, value]) => value.max != 0)
              .sort(([, a], [, b]) => {
                const weightA = a["weight"] || 99;
                const weightB = b["weight"] || 99;
                return weightA > weightB ? -1 : 1;
              })) {
              var current = description.current || 0;
              var maxAllowed = description.max;
              // Flavor not valid, so skip
              if (maxAllowed == 0 || current < 0 || maxAllowed == null || current == null) continue;

              var bgColor = "bg-primary";
              // Infinite allowed
              if (maxAllowed == -1) {
                var progressTooltip = `${current} used`;
                var maxAllowedLabel = '∞';
                if (current == 0) {
                  var currentWidth = 0;
                  var maxAllowedWidth = 100;
                }
                else {
                  var currentWidth = 20;
                  var maxAllowedWidth = 80;
                }
              }
              else {
                var progressTooltip = `${current} out of ${maxAllowed} used`;
                var maxAllowedLabel = maxAllowed - current;
                var currentWidth = current / maxAllowed * 100;
                var maxAllowedWidth = maxAllowedLabel / maxAllowed * 100;

                if (maxAllowedLabel < 0) {
                  maxAllowedLabel = 0;
                  maxAllowedWidth = 0;
                  bgColor = "bg-danger";
                }
              }

              var diagramHtml = `
                <div class="row align-items-center g-0 mt-4">
                  <div class="col-4">
                    <span>${description.display_name}</span>
                    <a class="lh-1 ms-3" style="padding-top: 1px;" 
                      data-bs-toggle="tooltip" data-bs-placement="right" title="${description.description}">
                      {{ svg.info_svg | safe }}
                    </a>
                  </div>
                  <div class="progress col ms-2 fw-bold" style="height: 20px;"
                    data-bs-toggle="tooltip" data-bs-placement="top" title="${progressTooltip}">
                    <div class="progress-bar ${bgColor}" role="progressbar" style="width: ${currentWidth}%">${current}</div>
                    <div class="progress-bar bg-success" role="progressbar" style="width: ${maxAllowedWidth}%">${maxAllowedLabel}</div>
                  </div>
                </div>
              `
              inputDiv.append(diagramHtml);
            }
          }
        }

        // The lab has a flavor configured or is a new lab, but we could not get any flavor information
        {#
          if (((window.userOptions[id] || {}).flavor || id == "new-jupyterlab") && $.isEmptyObject(systemFlavors)) {
          var noFlavorsHtml = `
          <div class="row g-0 mt-3">
            <div class="col-4"></div>
            <div class="col ms-2 fw-bold text-danger">No flavors could be fetched. Try logging out and back in to fix the issue.</div>
          </div>
          `;
          $(`#${serviceId}-${rowId}-${tabId}-systemtype-kube-flavorinfo-info-div`).append(noFlavorsHtml);
        }
        #}
      }

      function homeTriggerFlavorInfo(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const systems = val(getInputElement(serviceId, rowId, "system"));

        if ( systems.some(item => kubeFlavorSystems.includes(item)) && systems.length == 1 ){
          setFlavorInfo(serviceId, rowId, systems[0]);
          // $(`[id^='${serviceId}-${rowId}-'][id$='-flavorinfo-info-div']`).show();
        }
      }

      function wTriggerFlavorInfo(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerFlavorInfo(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }
    {# <-- Workshop.labconfig.flavorinfo #}

    {# WorkshopManager.default.lmod.modules --> #}
      function wmTriggerModules(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const optiontypes = getOptionTypes(serviceId, rowId);
        if ( optiontypes.includes("lmod") ) {
          const values = getModuleValues(serviceId, rowId, elementId, elementOptions.input.options.setName);
          const elementSelect = $(`select[id^='${serviceId}-${rowId}-'][id$='-${elementId}-input']`);
          fillSelect(elementId, elementSelect, values);
          const activeValues = values.filter(item => item[2]).map(item => item[0]);
          elementSelect.val(activeValues).trigger("change");
        }
      }
    {# <-- WorkshopManager.default.lmod.modules #}

    {# WorkshopManager.default.repo2docker.repopathtype --> #}

      function homeTriggerRepoPathType(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const repoPathChecked = val(getLabelCBElement(serviceId, rowId, "repopath"));

        const repoPathTypeDiv = getInputDiv(serviceId, rowId, "repopathtype");
        const repoPathTypeInput = getInputElement(serviceId, rowId, "repopathtype");
        if ( !repoPathChecked ) {
          repoPathTypeDiv.hide();
        } else {
          repoPathTypeDiv.show();
        }
      }

      function wmTriggerRepoPathType(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const repoPathChecked = val(getLabelCBElement(serviceId, rowId, "repopath"));

        const repoPathTypeDiv = getInputDiv(serviceId, rowId, "repopathtype");
        const repoPathTypeInput = getInputElement(serviceId, rowId, "repopathtype");
        const repoPathTypeLabel = getLabelCBElement(serviceId, rowId, "repopathtype");
        if ( !repoPathChecked ) {
          repoPathTypeInput.prop("disabled", true);
          repoPathTypeLabel.prop("checked", false);
          repoPathTypeLabel.prop("disabled", true);
          repoPathTypeDiv.hide();
        } else {
          repoPathTypeDiv.show();
          repoPathTypeLabel.prop("disabled", false);
          const repoPathTypeChecked = repoPathTypeLabel.prop("checked");
          repoPathTypeInput.prop("disabled", !repoPathTypeChecked);
        }
      }

      function wTriggerRepoPathType(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerRepoPathType(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }
    {# <-- WorkshopManager.default.repo2docker.repopathtype #}

    {# WorkshopManager.default.repo2docker.repotype --> #}  

      function homeTriggerRepoTypeChanged(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        // depending on 

      }

    {# <-- WorkshopManager.default.repo2docker.repotype #}

    {# WorkshopManager.default.expertmode --> #}
      function wmTriggerExpertMode(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const optionInput = $(`[id^="${serviceId}-${rowId}-"][id$="-option-input"]`);
        const systemInput = $(`[id^="${serviceId}-${rowId}-"][id$="-system-input"]`);

        if ( val(getInputElement(serviceId, rowId, elementId)) ){
          // if checked: set systems + options to multiple
          [optionInput, systemInput].forEach(input => {
            input.prop("size", 4);
            input.prop("multiple", true);
            input.trigger("change");
            const key = input.attr("data-element");
            $(`[id^="${serviceId}-${rowId}-"][id$="-input"]`).trigger(`trigger_${key}`);
          })
        } else {
          [optionInput, systemInput].forEach(input => {
            input.prop("size", 1);
            input.prop("multiple", false);
            input.trigger("change");
            const key = input.attr("data-element");
            $(`[id^="${serviceId}-${rowId}-"][id$="-input"]`).trigger(`trigger_${key}`);
          })
        }
      }
    {# <-- WorkshopManager.default.expertmode #}
    
    {# WorkshopManager.button.helper --> #}

      function showToast(message, type = "danger") {
        const toast = $(`
          <div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" style="opacity: 0.9 !important" aria-atomic="true">
            <div class="d-flex">
              <div class="toast-body">
                  ${message}
              </div>
              <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
          </div>
        `);
        $("#toastContainer").append(toast);
        const bsToast = new bootstrap.Toast(toast[0]);
        bsToast.show();
      }

      function getAPIOptions() {
        return {
          dataType: null,
          tryCount: 5,
          error: function (jqXHR, textStatus, errorThrown) {
            if (jqXHR.status == 503) {
                this.tryCount--;
                if (this.tryCount >= 0) {
                  $.ajax(this);
                  return;
                }
                showToast("Request to Server failed. Try refreshing website");
                console.error("API Request failed:", textStatus, errorThrown);
                return;
              }
              if (jqXHR.status == 403) {                
                return;
              }
              showToast("Request to Server failed. Try refreshing website");
              console.error("API Request failed:", textStatus, errorThrown);
            }
        }
      }

      function getWorkshopManagerAPIUrl(serviceId, rowId, utils, base_url) {
        if ( isFirstRow(rowId) ) {
          const workshopId = $(`input[id^='${serviceId}-${rowId}-'][id$='-workshopid-input']`).val();
          if ( workshopId ) {
            return utils.url_path_join("workshops", workshopId);
          } else {
            return "workshops";
          }
        } else {
          return utils.url_path_join("workshops", rowId);
        }
      }
    {# <-- WorkshopManager.button.helper #}

    {# WorkshopManager.button.new --> #}

      function homeHeaderUpdate(serviceId, rowId) {
        const option = $(`[id^='${serviceId}-${rowId}-'][id$='-option-input']`).val();
        const system = $(`[id^='${serviceId}-${rowId}-'][id$='-system-input']`).val();
        const project = $(`[id^='${serviceId}-${rowId}-'][id$='-project-input']`);
        const partition = $(`[id^='${serviceId}-${rowId}-'][id$='-partition-input']`);

        $(`#${serviceId}-${rowId}-config-td-option`).html(`${option}`);
        $(`#${serviceId}-${rowId}-config-td-system`).html(`${system}`);

        const nameThElement = $(`#${serviceId}-${rowId}-summary-tr th.name-td`);
        const name = $(`[id^='${serviceId}-${rowId}-'][id$='-name-input']`).val();
        nameThElement.html(name);

        const projectDiv = $(`#${serviceId}-${rowId}-config-td-project-div`);
        const partitionDiv = $(`#${serviceId}-${rowId}-config-td-partition-div`);

        if ( project.attr("data-collect") === "true" ) {
          projectDiv.show();
          $(`#${serviceId}-${rowId}-config-td-project`).html(`${project.val()}`);
        } else {
          projectDiv.hide();
        }

        if ( partition.attr("data-collect") === "true" ) {
          partitionDiv.show();
          $(`#${serviceId}-${rowId}-config-td-partition`).html(`${partition.val()}`);
        } else {
          partitionDiv.hide();
        }
        
        const repotypeShort = $(`[id^='${serviceId}-${rowId}-'][id$='-repotype-input']`);
        const repoTypeMapping = {
          "gh": "GitHub",
          "git": "Git repository",
          "gl": "GitLab",
          "gist": "GitHub Gist",
          "zenodo": "Zenodo DOI",
          "figshare": "FigShare DOI",
          "hydroshare": "Hydroshare resource",
          "dataverse": "Dataverse DOI",
          "ckan": "CKAN dataset"
        }
        const repotype = repoTypeMapping?.[repotypeShort.val()] || repotypeShort.val();
        const repotypeDiv = $(`#${serviceId}-${rowId}-config-td-repotype-div`);

        const repourl = $(`[id^='${serviceId}-${rowId}-'][id$='-repourl-input']`);
        const repourlDiv = $(`#${serviceId}-${rowId}-config-td-repourl-div`);

        if ( repotypeShort.attr("data-collect") === "true" ) {
          repotypeDiv.show();
          $(`#${serviceId}-${rowId}-config-td-repotype`).html(`${repotype}`);
        } else {
          repotypeDiv.hide();
        }

        if ( repourl.attr("data-collect") === "true" ) {
          repourlDiv.show();
          const repourlVal = repourl.val().split("/").filter(Boolean).pop();
          $(`#${serviceId}-${rowId}-config-td-repourl`).html(`${repourlVal}`);
        } else {
          repourlDiv.hide();
        }
      }

      function homeTriggerButtonSave(serviceId, rowId, buttonId, button_options, user, api, base_url, utils, show_modal=false) {
        const options = getAPIOptions();
        const form = $(`form[id^='${serviceId}-${rowId}-form']`);
        const valid = validateForm(serviceId, rowId);
        if ( !valid ) {
          console.log(`Invalid Form for ${serviceId}-${rowId}`);
          return;
        }
        let userOptions = collectSelectedOptions(serviceId, rowId, allCheckboxes=true);

        options["data"] = JSON.stringify({
          ...userOptions,
        });

        options["success"] = function () {
          if ( !Object.keys(globalUserOptions).includes(serviceId) ){
            globalUserOptions[serviceId] = {};
          }
          globalUserOptions[serviceId][rowId] = userOptions;
          homeHeaderUpdate(serviceId, rowId);
        }
        api.update_named_server(user, rowId, options);
      }

      function homeTriggerButtonReset(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
        const uO = globalUserOptions?.[serviceId]?.[rowId];
        const fO = globalFillingOrder?.[serviceId];
        homeFillExistingRow(serviceId, rowId, uO, fO);
        homeHeaderUpdate(serviceId, rowId);
      }

      function wTriggerButtonReset(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
        const uO = globalUserOptions?.[serviceId]?.[rowId];
        const fillingOrder = button_options?.options?.fillingOrder || [];
        workshopFillExistingRow(serviceId, rowId, uO, fillingOrder);
        homeHeaderUpdate(serviceId, rowId);
      }


      function wmNewSave(serviceId, rowId, buttonId, button_options, user, api, base_url, utils, show_modal=false) {
        const options = getAPIOptions();
        const form = $(`form[id^='${serviceId}-${rowId}-form']`);
        const valid = validateForm(serviceId, rowId);
        if ( !valid ) {
          console.log(`Invalid Form for ${serviceId}-${rowId}`);
          return;
        }
        let userOptions = collectSelectedOptions(serviceId, rowId, allCheckboxes=true);
        let workshopData = collectWorkshopOptions(serviceId, rowId);

        options["data"] = JSON.stringify({
          ...userOptions,
          ...workshopData
        });
        options["success"] = function (resp) {
          if ( show_modal ) {
            let url = new URL(utils.url_path_join(window.origin, "workshops", resp).replace("//", "/"));
            $('#rowid-reload').val(resp);
            showModal(serviceId, rowId, url, "Share Workshop", "Share your workshop via URL", url);
          }
        };
        options["type"] = "POST";

        api.api_request(
          getWorkshopManagerAPIUrl(serviceId, rowId, utils, base_url),
          options
        );
      }

      function wmSummaryButtonNew(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
        wmNewSave(serviceId, rowId, buttonId, button_options, user, api, base_url, utils, true);
      }
    {# <-- WorkshopManager.button.new #}

    {# WorkshopManager.button.reset --> #}
      function wmTriggerButtonReset(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
        const options = getAPIOptions();
        options["type"] = "GET";
        const fillingOrder = button_options?.options?.fillingOrder || [];
        options["success"] = function (resp) {
          workshopManagerFillExistingRow(serviceId, rowId, resp, fillingOrder);
        }
        api.api_request(
          getWorkshopManagerAPIUrl(serviceId, rowId, utils, base_url),
          options
        );
      }
    {# <-- WorkshopManager.button.reset #}

    function homeTriggerButtonShare(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
      // Send POST Request to the Backend, if successful -> show modal
      // let url = new URL(utils.url_path_join(window.origin, "share", resp).replace("//", "/"));
      // let url = new URL(utils.url_path_join(window.origin, "share", "user_options").replace("//", "/"));

      const name = $(`[id^='${serviceId}-${rowId}-'][id$='-name-input']`).val();
      const options = getAPIOptions();
      const userOptions = collectSelectedOptions(serviceId, rowId);
      if ( Object.keys(userOptions).includes("share_id") ) {
        delete userOptions["share_id"];
      }
      options["data"] = JSON.stringify(userOptions);
      options["type"] = "POST";
      options["success"] = function (resp) {
        let shareUrl = new URL(utils.url_path_join(window.origin, "share", resp).replace("//", "/"));
        showModal(serviceId, rowId, shareUrl, `Share Configuration ${name}`, "Share your configuration via URL", shareUrl);
      };
      const url = utils.url_path_join("share", "user_options");
      api.api_request(
        url,
        options
      );
    }

    {# WorkshopManager.button.share --> #}
      function wmTriggerButtonShare(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
        let url = new URL(utils.url_path_join(window.origin, "workshops", rowId).replace("//", "/"));
        showModal(serviceId, rowId, url, "Share Workshop", "Share your workshop via URL", url);
      }
    {# <-- WorkshopManager.button.share #}

    {# WorkshopManager.button.delete --> #}
      function wmTriggerButtonDelete(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
        const options = getAPIOptions();
        options["type"] = "DELETE";
        options["success"] = function () {
          $(`tr[data-server-id=${serviceId}-${rowId}]`).each(function () {
            $(this).remove();
          });
        };
        api.api_request(
          getWorkshopManagerAPIUrl(serviceId, rowId, utils, base_url),
          options
        );
      }
    {# <-- WorkshopManager.button.delete #}

    {# WorkshopManager.button.stop --> #}
      function updateHeaderButtons(serviceId, rowId, status) {
        // status: ["running", "starting", "na", "stopping", "cancelling", "stopped", "waiting"]
        const summaryTr = $(`#${serviceId}-${rowId}-summary-tr`);
        if ( summaryTr.attr("data-spawner-na") == "true" ) {
          status = "na";
        }
        let toShow = [];
        let toDisable = [];
        if ( status == "running" ) {
          toShow = ["open", "stop"];
        } else if ( status == "waiting" ) {
          toShow = ["open", "stop"];
          toDisable = ["open"];
        } else if ( status == "starting" ) {
          toShow = ["cancel"];
        } else if ( status == "na" ) {
          toShow = ["na", "del"];
          toDisable = ["na"];
        } else if ( status == "stopping" ) {
          toShow = ["open", "stop"];
          toDisable = ["open", "stop"];
        } else if ( status == "cancelling" ) {
          toShow = ["cancel"];
          toDisable = ["cancel"];
        } else if ( status == "stopped" ) {
          toShow = ["start"];
          toDisable = [];
        } else if ( status == "building" ) {
          toShow = ["start"];
          toDisable = ["start"];
        } else if ( status == "disable" ) {
          toDisable = ["open", "stop", "cancel", "start", "del"];
        }
        const baseSelector = `button[id^="${serviceId}-${rowId}"][id$="-btn-header"]`;

        if ( summaryTr.attr("data-spawner-type") == "workshop" ) {
          toShow.push("manage");
          toShow.push("del");
        }
        
        // Enable buttons
        const toDisableExcludeSelector = toDisable
          .map(item => `:not([id$="-${item}-btn-header"])`)
          .join("");
        $(`${baseSelector}${toDisableExcludeSelector}`).prop("disabled", false);

        // Disable buttons
        toDisable.forEach(item => {
          $(`button[id^="${serviceId}-${rowId}"][id$="-${item}-btn-header"]`).prop("disabled", true);
        });

        if ( status != "disable" ) {
          // Hide buttons
          const toShowExcludeSelector = toShow
            .map(item => `:not([id$="-${item}-btn-header"])`)
            .join("");
          $(`${baseSelector}${toShowExcludeSelector}:not([data-show-always="true"])`).hide();

          // Show buttons
          toShow.forEach(item => {
            $(`button[id^="${serviceId}-${rowId}"][id$="-${item}-btn-header"]`).show();
          });
        }
      }

      function getCurrentTimestamp() {
          const now = new Date();

          const berlinTime = new Date(
              now.toLocaleString('en-US', { timeZone: 'Europe/Berlin' })
          );

          const year = berlinTime.getFullYear();
          const month = String(berlinTime.getMonth() + 1).padStart(2, '0');
          const day = String(berlinTime.getDate()).padStart(2, '0');
          const hours = String(berlinTime.getHours()).padStart(2, '0');
          const minutes = String(berlinTime.getMinutes()).padStart(2, '0');
          const seconds = String(berlinTime.getSeconds()).padStart(2, '0');
          const milliseconds = String(now.getMilliseconds()).padStart(3, '0');

          return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}.${milliseconds}`;
      }

      function getStopEvent(buttonId) {
        const event = {
          "progress": 100,
          "failed": true,
          "ready": false,
          "html_message": `<details><summary>${getCurrentTimestamp()}: Start cancelled by user.</summary>${buttonId} button was triggered.</details>`
        }
        return event;
      }

      function homeSummaryButtonManage(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
        const workshopId = globalUserOptions[serviceId][rowId].workshop_id;
        let url = new URL(utils.url_path_join(window.origin, "workshops", workshopId).replace("//", "/"));
        window.open(url, "_blank");
      }

      function homeSummaryButtonStop(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
        const options = getAPIOptions();
        options["success"] = function (data, textStatus, jqXHR) {
          updateHeaderButtons(serviceId, rowId, "stopped");
          progressBarUpdate(serviceId, rowId, "", 0);
          appendToLog(serviceId, rowId, getStopEvent(buttonId));
          
          const navbarLogsButton = $(`[id^='${serviceId}-${rowId}-'][id$='-logs-navbar-button']`);
          if ( navbarLogsButton.hasClass("active") ) {
            const navbarLabConfigButton = $(`[id^='${serviceId}-${rowId}-'][id$='-labconfig-navbar-button']`);
            if ( navbarLabConfigButton ) {
              navbarLabConfigButton.trigger("click");
            }
          }
        }
        updateHeaderButtons(serviceId, rowId, "stopping");
        progressBarUpdate(serviceId, rowId, "stopping", 100);
        api.stop_named_server(user, rowId, options);
      }
    {# <-- WorkshopManager.button.stop #}
    {# WorkshopManager.button.cancel --> #}
      function homeSummaryButtonCancel(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
        const options = getAPIOptions();
        options["success"] = function (data, textStatus, jqXHR) {
          updateHeaderButtons(serviceId, rowId, "stopped");
          progressBarUpdate(serviceId, rowId, "", 0);
          appendToLog(serviceId, rowId, getStopEvent(buttonId));    
          
          const navbarLogsButton = $(`[id^='${serviceId}-${rowId}-'][id$='-logs-navbar-button']`);
          if ( navbarLogsButton.hasClass("active") ) {
            const navbarLabConfigButton = $(`[id^='${serviceId}-${rowId}-'][id$='-labconfig-navbar-button']`);
            if ( navbarLabConfigButton ) {
              navbarLabConfigButton.trigger("click");
            }
          }      
        }
        updateHeaderButtons(serviceId, rowId, "cancelling");
        progressBarUpdate(serviceId, rowId, "cancelling", 99);
        api.cancel_named_server(user, rowId, options);
      }
    {# <-- WorkshopManager.button.cancel #}

    {# WorkshopManager.button.open --> #}
      async function checkAndOpenUrl(serviceId, rowId, url, blank=true, retries = 50, delay = 500) {
        // wait for 3 successful responses
        let successCounter = 0;
        for (let attempt = 1; attempt <= retries; attempt++) {
          try {
            const response = await fetch(`${url}/api`, {
              method: 'GET',
              mode: 'no-cors',
            });
            if (response.ok || response.status == 405) {
              successCounter += 1;
              if ( successCounter > 8 ) {
                if ( blank ) {
                  var newTab = window.open("about:blank");
                  newTab.location.href = url;
                } else {
                  window.open(url);
                }
                updateHeaderButtons(serviceId, rowId, "running");
                progressBarUpdate(serviceId, rowId, "running", 100);
                $(`button[id^='${serviceId}-${rowId}-'][id$='-btn']`).prop("disabled", false);
                showToast("The server should open automatically. If it doesn’t, your browser may be blocking pop-ups for this site.", "warning");
                return;
              }
            } 
          } catch (error) {
            console.error(`Attempt ${attempt}: Network error or invalid URL -`, error);
          }

          if (attempt < retries) {
            // Wait for the specified delay before retrying
            await new Promise(resolve => setTimeout(resolve, delay));
          } else {
            updateHeaderButtons(serviceId, rowId, "running");
            progressBarUpdate(serviceId, rowId, "running", 100);
            showToast(`Cannot connect to started Server. Try to open manually. If this does not work try restarting the Server.`);
            console.error("Maximum retries reached. Unable to access the website.");
          }
        }
      }

      function homeSummaryButtonOpen(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
        window.open(`/user/{{ user.name}}/${rowId}`, "_blank");
      }

      function workshopButtonOpen(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
        window.open("{{ url }}", "_blank");
      }
    {# <-- WorkshopManager.button.open #}
    

    {# WorkshopManager.button.save --> #}
      function wmTriggerButtonSave(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
        wmNewSave(serviceId, rowId, buttonId, button_options, user, api, base_url, utils, false);
      }
    {# <-- WorkshopManager.button.save #}

  {# <-- Workshop Manager #}

  {# Workshop --> #}
    {# Workshop.labconfig.custom.username --> #}
      function toggleExternalCB(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const labelChecked = val(getLabelCBElement(serviceId, rowId, trigger));
        const inputDiv = getInputDiv(serviceId, rowId, elementId);
        const inputElement = getInputElement(serviceId, rowId, elementId);
        if ( labelChecked ) {
          inputDiv.show();
          const inputLabel = getLabelCBElement(serviceId, rowId, elementId);
          if ( inputLabel.length > 0 ) {
            if ( val(inputLabel) ) {
              inputElement.attr("data-collect", true);
            } 
          } else {
            inputElement.attr("data-collect", true);
          }
        } else {
          inputDiv.hide();
          inputElement.attr("data-collect", false);
        }
      }
    {# <-- Workshop.labconfig.custom.username #}

    {# Workshop.labconfig.unicore.account --> #}
      function homeTriggerAccount(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        const values = getAccountOptions(serviceId, rowId);
        const inputElement = getInputElement(serviceId, rowId, "account");
        fillSelect(elementId, inputElement, values);
        // inputElement.trigger("change");
      }

      function wTriggerAccount(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerAccount(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }
    {# Workshop.labconfig.unicore.account --> #}

    {# Workshop.modules --> #}
      function getModuleValues(serviceId, rowId, name, setName) {
        const options = val(getInputElement(serviceId, rowId, "option"));
        let values = [];
        let keys = new Set();
        options.forEach(option => {
          if (getServiceConfig(serviceId)?.options?.[option]?.[setName]) {
            const nameSet = getServiceConfig(serviceId)?.options[option]?.[setName];
            Object.entries(userModulesConfig[name])
              .filter(([key, value]) => value.sets && value.sets.includes(nameSet))
              .forEach( ([key, value]) => {
                if ( !keys.has(key) ) {
                  keys.add(key);
                  values.push([
                    key,
                    value.displayName,
                    typeof value.default === 'object' && value.default !== null ? value.default.default : value.default,
                    value.href
                  ]);
                }
              });
          }
        });
        return values;
      }

      function homeTriggerModules(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        $(`input[id^='${serviceId}-${rowId}-${tabId}-'][id$='-select-all']`).prop("checked", false);
        $(`input[id^='${serviceId}-${rowId}-${tabId}-'][id$='-select-none']`).prop("checked", false);

        const containerDiv = $(`div[id^='${serviceId}-${rowId}-'][id$='${elementId}-checkboxes-div']`);
        const inputDiv = $(`div[id^='${serviceId}-${rowId}-'][id$='${elementId}-input-div']`);
        const values = getModuleValues(serviceId, rowId, elementId, elementOptions.options.setName);
        
        let workshopPreset = false;
        let workshopPresetChecked = [];
        const group = elementOptions.options.group || tabId;
        const name = elementOptions.options.name || elementId;
        {%- if pagetype == vars.pagetype_workshop %}
          const workshopValues = {{ workshop_options | tojson }}
          if ( Object.keys(workshopValues).includes(group) && Object.keys(workshopValues[group]).includes(name) ){
            workshopPreset = true;
            const modules = workshopValues[group][name];
            if ( modules.length > 0 ) {
              workshopPresetChecked = modules;
            }
          }
        {%- endif %}
        // Ensure the container exists
        if (containerDiv.length > 0 && values.length > 0) {
          const idPrefix = containerDiv.attr('id').replace(/-checkboxes-div$/, "");
          containerDiv.html('');
          values.forEach(function (item) {
            let isChecked = '';
            let isDisabled = '';
            if ( workshopPreset ) {
              if ( workshopPresetChecked.includes(item[0]) ){
                isChecked = 'checked';
              }
              isDisabled = 'disabled="true"';
            } else {
              isChecked = item[2] ? 'checked' : '';
            }
            let dependencies = '';
            if ( elementOptions.dependency ){
              for (const [specificKey, specificValues] of Object.entries(elementOptions.dependency)) {
                dependencies += ` data-dependency-${specificKey}="true"`;
                specificValues.forEach(specificValue => {
                  dependencies += ` data-dependency-${specificKey}-${specificValue}="true"`;
                });
              }
            }
            
            // Create the new div block
            const newDiv = $(`
              <div id="${idPrefix}-${item[0]}-input-div" class="form-check col-sm-6 col-md-4 col-lg-3">
                <input type="checkbox" name="${item[0]}" data-collect="true" ${dependencies}                
                  data-checked="${isChecked}" data-parent="${elementId}" data-group="${group}" data-element="${item[0]}" data-type="multiplecheckbox" data-row="${rowId}" data-tab="${tabId}" class="form-check-input" id="${idPrefix}-${item[0]}-input" value="${item[0]}" ${isChecked} ${isDisabled}/>
                <label class="form-check-label" for="${idPrefix}-${item[0]}-input">
                  <span class="align-middle">${item[1]}</span>
                  <a href="${item[3]}" target="_blank" class="module-info text-muted ms-3">
                    <span>{{ svg.info_svg | safe }}</span>
                    <div class="module-info-link-div d-inline-block">
                      <span class="module-info-link" id="nbdev-info-link"> {{ svg.link_svg | safe }}</span>
                    </div>
                  </a>
                </label>
              </div>
            `);
            // Append the new div to the container
            containerDiv.append(newDiv);
            // Add toggle function to each checkbox
            $(`#${idPrefix}-${item[0]}-input`).on("click", function (event) {
              $(`input[id^='${serviceId}-${rowId}-'][id$='-select-all']`).prop("checked", false);
              $(`input[id^='${serviceId}-${rowId}-'][id$='-select-none']`).prop("checked", false);
            });
          });
        }
        inputDiv.show();
      }

      function wTriggerModules(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
        homeTriggerModules(trigger, serviceId, rowId, tabId, elementId, elementOptions);
      }
    {# <-- Workshop.modules #}
    {# Workshop.navbar.resources --> #}
      function homeTriggerNavbarResources(trigger, serviceId, rowId) {
        const systems = getUnicoreValues(serviceId, rowId, "system");
        const partitions = getUnicoreValues(serviceId, rowId, "partition");
        let showResources = false;      
        systems.forEach( (system) => {
          if ( !showResources ) {
            partitions.forEach( (partition) => {
              if ( !showResources && (Object.keys(resourcesConfig[system])).includes(partition) ) {
                if ( !(systemConfig[system]?.interactivePartitions || []).includes(partition) ) {
                  showResources = true;
                }
              }
            });
          }
        });
        if ( showResources ) {
          $(`button[id^="${serviceId}-${rowId}-${trigger}-navbar-button"]`).trigger("show");
        } else {
          $(`button[id^="${serviceId}-${rowId}-${trigger}-navbar-button"]`).trigger("hide");
        }
      }
      function wTriggerNavbarResources(trigger, serviceId, rowId) {
        homeTriggerNavbarResources(trigger, serviceId, rowId);
      }
    {# <-- Workshop.navbar.resources #}

    {# Workshop.labconfig.name --> #}
      {%- if pagetype == vars.pagetype_workshop %}
        function wTriggerName(trigger, serviceId, rowId, tabId, elementId, elementOptions) {
          const inputName = getInputElement(serviceId, rowId, elementId);
          const user_options = {{ workshop_options | tojson }} || {};
          const displayName = user_options.name || "Workshop {{ workshop_id }}";
          inputName.val(displayName);
        }
      {%- endif %}
    {# <-- Workshop.labconfig.name #}

    {# Workshop.logs.logcontainer --> #}

      function fillLogContainer(serviceId, rowId, events) {
        clearLogs(serviceId, rowId);
        events.forEach(event => {
          appendToLog(serviceId, rowId, event);
        })
      }

      function clearLogs(serviceId, rowId) {
        const logInputElement = $(`[id^='${serviceId}-${rowId}-logs'][id$='-logcontainer-input']`);
        logInputElement.html("");
      }

      function defaultLogs(serviceId, rowId) {
        const logInputElement = $(`[id^='${serviceId}-${rowId}-logs'][id$='-logcontainer-input']`);
        logInputElement.html("Logs collected during the Start process will be shown here. (This does not work? Try refreshing the website)");
      }
    
      function appendToLog(serviceId, rowId, event) {    
        const logInputElement = $(`[id^='${serviceId}-${rowId}-logs'][id$='-logcontainer-input']`);
        let htmlMsg = "";
        if (event.html_message !== undefined) {
          htmlMsg = event.html_message
        } else if (event.message !== undefined) {
          htmlMsg = event.message;
        }
        if ( !htmlMsg && event.failed ) {
          htmlMsg = "Server stopped";
        }
        if ( htmlMsg ) {
          try { 
            htmlMsg = htmlMsg.replace(/&nbsp;/g, ' ');
          } catch (e) { 
            console.log("Could not append Log Message");
            console.log(e);
            return;
          }
          let exists = false;
          const childCount = logInputElement.children().length;
          logInputElement.children().each(function (i, e) {
            let logMsg = $(e).html();
            if (htmlMsg == logMsg) exists = true;
          })
          if (!exists)
            logInputElement.append($(`<div id="${serviceId}-${rowId}-logs-logcontainer-element${childCount}" class="log-div">`).html(htmlMsg));
            let element = $(`#${serviceId}-${rowId}-logs-logcontainer-element${childCount}`);
            
            if ( event.progress === 100 && element.find("details") ) {
              element.find("details").attr("open", true);
            }

        }
      }
    {# <-- Workshop.logs.logcontainer #}

    {# Workshop.header.progressBar --> #}
      function progressBarUpdate(serviceId, rowId, status, progress) {
        const progressBarElement = $(`#${serviceId}-${rowId}-progress-bar`);
        const progressTextElement = $(`#${serviceId}-${rowId}-progress-text`);
        const progressTextInfoElement = $(`#${serviceId}-${rowId}-progress-info-text`);
        let background = "";
        let text = "";
        let color = "black";
        if ( progress >= 60 ) {
          color = "white";
        }
        if ( status == "connecting" ) {
          text = "connecting";
          background = "bg-success";
        } else if ( status == "running" ) {
          text = "running";
          background = "bg-success";
        } else if ( status == "stopped" ) {
          text = "stopped";
          background = "bg-danger";
        } else if ( status == "cancelling" ) {
          text = "cancelling";
          background = "bg-danger";
        } else if ( status == "stopping" ) {
          text = "stopping";
          background = "bg-danger";
        } else if ( status == "starting" ) {
          text = "starting";
        } else if ( status == "building" ) {
          text = "building";
        } else if ( progress == 0 ){
          text = "";
        }
        progressBarElement.width(progress).removeClass("bg-success bg-danger bg-primary").addClass(background).html("");
        progressTextElement.css('color', color);
        if ( progress == 100 || progress == 0 ) {
          progressTextElement.html("");
        } else {
          progressTextElement.html(`${progress}%`);
        }
        progressTextInfoElement.html(text);
      }
    {# <-- Workshop.header.progressBar #}

  {# <-- Workshop #}

  {# Home --> #}
    function _uuidv4hex() {
      return ([1e7, 1e3, 4e3, 8e3, 1e11].join('')).replace(/[018]/g, c =>
        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));
    }
    function _uuidWithLetterStart() {
      let uuid = _uuidv4hex();
      let char = Math.random().toString(36).match(/[a-zA-Z]/)[0];
      return char + uuid.substring(1);
    }

    function homeTriggerButtonStartGreen(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
      const newId = _uuidWithLetterStart();
      const options = getAPIOptions();      

      const form = $(`form[id^='${serviceId}-${rowId}-form']`);
      const valid = validateForm(serviceId, rowId);
      if ( !valid ) {
        console.log(`Invalid Form for ${serviceId}-${rowId}`);
        return;
      }

      let userOptions = collectSelectedOptions(serviceId, rowId);



      if ( ! (userOptions.service == "jupyterlab" && userOptions.option == "repo2docker") ) {
        options["data"] = JSON.stringify(userOptions);

        options["success"] = function (data, textStatus, jqXHR) {          
          const url = new URL(window.location.href);
          localStorage.setItem("service", serviceId);
          localStorage.setItem("row", newId);
          localStorage.setItem("showlogs", "true");
          window.location.href = url.toString();
        }
        api.start_named_server(user, newId, options);
      } else {
        options["data"] = JSON.stringify(userOptions);

        options["success"] = function (data, textStatus, jqXHR) {
          const url = new URL(window.location.href);
          localStorage.setItem("service", serviceId);
          localStorage.setItem("row", newId);
          localStorage.setItem("showlogs", "true");
          window.location.href = url.toString();
        }
        api.update_named_server(user, newId, options);
      }
    }    

    // Build repo2docker image and send start request afterwards
    function startRepo2Docker(serviceId, rowId, userOptions, user, api, base_url, utils) {
      $(`button[id^='${serviceId}-${rowId}-'][id$='-btn']`).prop("disabled", true);
      homeHeaderUpdate(serviceId, rowId);
      updateHeaderButtons(serviceId, rowId, "building");
      progressBarUpdate(serviceId, rowId, "building", 2);

      let toView = document.getElementById(`${serviceId}-${rowId}-summary-tr`);
      if ( toView ) toView.scrollIntoView();

      // show summary-tr
      const summaryTr = $(`tr[id^='${serviceId}-${rowId}-summary-tr']`);
      const accordionIcon = summaryTr.find(".accordion-icon");
      const collapse = $(`.collapse[id^='${serviceId}-${rowId}-collapse']`);
      const shown = collapse.hasClass("show");
      if ( ! shown ) {
        accordionIcon.removeClass("collapsed");
        new bootstrap.Collapse(collapse);
      }
      const navbarLogsButton = $(`[id^='${serviceId}-${rowId}-'][id$='-logs-navbar-button']`);
      if ( navbarLogsButton ) {
        navbarLogsButton.trigger("click");
      }
      
      const term = new Terminal({
        cursorBlink: true,
        rows: 20,
        cols: 80,
        theme: {
            background: '#000000',
            foreground: '#FFFFFF',
        }
      });
      const terminalDiv = $(`[id^='${serviceId}-${rowId}-'][id$='-terminal-container-div']`);
      const terminalElement = $(`[id^='${serviceId}-${rowId}-'][id$='-terminal-container']`);
      term.open(terminalElement[0]);
      term.write("\x1b[2K\r");
      terminalDiv.fadeIn();
      const type = userOptions.repo2docker.repotype;
      const repourl = userOptions.repo2docker.repourl;

      // build api url to call the build process
      let url = "";
      if ( Object.keys(userOptions.repo2docker).includes("reporef") ) {
        const reporef = userOptions.repo2docker?.reporef || "HEAD";        
        // url = new URL(utils.url_path_join("https://mybinder.org", "build", type, repourl, reporef).replace("//", "/"));
        url = new URL(utils.url_path_join(window.origin, "services", "binder", "build", type, repourl, reporef).replace("//", "/"));
        url.searchParams.append("build_only", "true");
      } else {
        // url = new URL(utils.url_path_join("https://mybinder.org", "build", type, repourl, "/").replace("//", "/"));
        url = new URL(utils.url_path_join(window.origin, "services", "binder", "build", type, repourl, "/").replace("//", "/"));
        url.searchParams.append("build_only", "true");
      }
      console.log(url);
      r2dEvtSource = new EventSource(url);
      let r2dStatus = 0;
      
      setTimeout(function() {
        if ( r2dStatus < 2 ) {
          term.write("Build failed" + "\r");
          updateHeaderButtons(serviceId, rowId, "stopped");
          progressBarUpdate(serviceId, rowId, "stopped", 100);
          r2dEvtSource.close();
        }
      }, 30000);

      r2dEvtSource.onmessage = (event) => {
        try {
            const jsonData = JSON.parse(event.data);
            console.log(jsonData);
            var message = jsonData.message;
            if ( jsonData.phase == "waiting" ) {
              if ( r2dStatus == 0 ) {
                progressBarUpdate(serviceId, rowId, "building", 2);
                r2dStatus = 1;
              }
            } else if ( jsonData.phase == "fetching" ) {
              if ( r2dStatus < 2 ) {
                progressBarUpdate(serviceId, rowId, "building", 3);
                r2dStatus = 2;
              }
            } else if ( jsonData.phase == "building" ) {
              if ( r2dStatus < 3 ) {
                progressBarUpdate(serviceId, rowId, "building", 5);
                r2dStatus = 3;
              }
            } else if ( jsonData.phase == "pushing" ) {
              if ( r2dStatus < 4 ) {
                progressBarUpdate(serviceId, rowId, "building", 8);
                r2dStatus = 4;
              }
            } else if ( ["ready", "built", "launching"].includes(jsonData.phase) ) {
              const options = getAPIOptions();
              userOptions["repo2docker"]["image"] = jsonData.imageName;
              options["data"] = JSON.stringify(userOptions);
              options["success"] = function (data, textStatus, jqXHR) {
                updateHeaderButtons(serviceId, rowId, "starting");
                if ( !Object.keys(globalUserOptions).includes(serviceId) ){
                  globalUserOptions[serviceId] = {};
                }
                globalUserOptions[serviceId][rowId] = userOptions;
                clearLogs(serviceId, rowId);

                setTimeout(function() {
                  const logInputElement = $(`[id^='${serviceId}-${rowId}-logs'][id$='-logcontainer-input']`);
                  if ( logInputElement.html() == "" ) {
                    console.log("Logs not fetched. Reload website");
                    const url = new URL(window.location.href);
                    localStorage.setItem("service", serviceId);
                    localStorage.setItem("row", rowId);
                    localStorage.setItem("showlogs", "true");
                    window.location.href = url.toString();
                  }
                }, 1000);
              }
              api.start_named_server(user, rowId, options);
                    
              const toView = document.getElementById(`${serviceId}-${rowId}-summary-tr`)
              if ( toView ) toView.scrollIntoView();

              // show summary-tr
              const summaryTr = $(`tr[id^='${serviceId}-${rowId}-summary-tr']`);
              const accordionIcon = summaryTr.find(".accordion-icon");
              const collapse = $(`.collapse[id^='${serviceId}-${rowId}-collapse']`);
              const shown = collapse.hasClass("show");
              if ( ! shown ) {
                accordionIcon.removeClass("collapsed");
                new bootstrap.Collapse(collapse);
              }
              const navbarLogsButton = $(`[id^='${serviceId}-${rowId}-'][id$='-logs-navbar-button']`);
              if ( navbarLogsButton ) {
                navbarLogsButton.trigger("click");
              }
              r2dEvtSource.close();
            } else if ( jsonData.phase == "failed" ) {
              term.write("Build failed" + "\r");
              $(`button[id^='${serviceId}-${rowId}-'][id$='-btn']`).prop("disabled", false);
              updateHeaderButtons(serviceId, rowId, "stopped");
              progressBarUpdate(serviceId, rowId, "stopped", 100);
              r2dEvtSource.close();
            }
            if ( message ) {
              term.write(jsonData.message + "\r");
            } else if ( message != "\n" ) {
              term.write("\n\r");
            }

        } catch (error) {
            term.write("Build failed" + "\r");
            console.log(error);
            $(`button[id^='${serviceId}-${rowId}-'][id$='-btn']`).prop("disabled", false);
            updateHeaderButtons(serviceId, rowId, "stopped");
            progressBarUpdate(serviceId, rowId, "stopped", 100);
            r2dEvtSource.close();
        }
      }

      r2dEvtSource.onerror = (e) => {
        console.log("Reconnect");
        console.log(e);
        r2dEvtSource.close();
      }

    }

    function wSummaryButtonStart(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
      let start = true;
      {%- if pagetype == vars.pagetype_workshop %}
        const workshopOptions = {{ workshop_options | tojson }};
        const keywordsToSkip = ["profile", "service", "secret_keys", "workshopid", "description", "expertmode"];
        function recursiveCheck(serviceId, rowId, userOptions) {
          for ( const [key, value] of Object.entries(userOptions) ) {
            if ( !keywordsToSkip.includes(key) ) {
              if ( value.constructor == Object ) {
                recursiveCheck(serviceId, rowId, value);
              } else {
                const currentVal = $(`[id^='${serviceId}-${rowId}-'][id$='-${key}-input']`).val();
                let allowedValues = Array.isArray(value) ? value : [value];
                if ( allowedValues && allowedValues.length > 0 && !allowedValues.includes(currentVal) ) {
                  showToast(`${key} ${currentVal} not allowed. Allowed values: ${allowedValues}`);
                  console.log(`${key} ${currentVal} not allowed. Allowed values: ${allowedValues}`);
                  start = false;
                }
              }
            }
          }
        }
        recursiveCheck(serviceId, rowId, workshopOptions);
      {%- endif %}
      if ( start ) homeSummaryButtonStart(serviceId, rowId, buttonId, button_options, user, api, base_url, utils);
    }

    function homeSummaryButtonStart(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
      const form = $(`form[id^='${serviceId}-${rowId}-form']`);
      const valid = validateForm(serviceId, rowId);
      if ( !valid ) {
        console.log(`Invalid Form for ${serviceId}-${rowId}`);
        return;
      }

      let userOptions = collectSelectedOptions(serviceId, rowId);
      clearLogs(serviceId, rowId);
      defaultLogs(serviceId, rowId);
      updateHeaderButtons(serviceId, rowId, "stopped");
      progressBarUpdate(serviceId, rowId, "", 0);
      
      const terminalElement = $(`[id^='${serviceId}-${rowId}-'][id$='-terminal-container']`);
      terminalElement.html("");
      
      // if it's a repo2DockerBuild, we handle the starting procedure in the startRepo2Docker function
      if ( ! (userOptions.service == "jupyterlab" && userOptions.option == "repo2docker") ) {
        const options = getAPIOptions();
        options["data"] = JSON.stringify(userOptions);
        options["success"] = function (data, textStatus, jqXHR) {
          $(`button[id^='${serviceId}-${rowId}-'][id$='-btn']`).prop("disabled", true);
          updateHeaderButtons(serviceId, rowId, "starting");
          if ( !Object.keys(globalUserOptions).includes(serviceId) ){
            globalUserOptions[serviceId] = {};
          }
          globalUserOptions[serviceId][rowId] = userOptions;
          homeHeaderUpdate(serviceId, rowId);
          clearLogs(serviceId, rowId);

          setTimeout(function() {
            const logInputElement = $(`[id^='${serviceId}-${rowId}-logs'][id$='-logcontainer-input']`);
            if ( logInputElement.html() == "" ) {
              console.log("Logs not fetched. Reload website");
              const url = new URL(window.location.href);
              localStorage.setItem("service", serviceId);
              localStorage.setItem("row", rowId);
              localStorage.setItem("showlogs", "true");
              window.location.href = url.toString();
            }
          }, 10000);
        }
        api.start_named_server(user, rowId, options);
              
        const toView = document.getElementById(`${serviceId}-${rowId}-summary-tr`)
        if ( toView ) toView.scrollIntoView();

        // show summary-tr
        const summaryTr = $(`tr[id^='${serviceId}-${rowId}-summary-tr']`);
        const accordionIcon = summaryTr.find(".accordion-icon");
        const collapse = $(`.collapse[id^='${serviceId}-${rowId}-collapse']`);
        const shown = collapse.hasClass("show");
        if ( ! shown ) {
          accordionIcon.removeClass("collapsed");
          new bootstrap.Collapse(collapse);
        }
        const navbarLogsButton = $(`[id^='${serviceId}-${rowId}-'][id$='-logs-navbar-button']`);
        if ( navbarLogsButton ) {
          navbarLogsButton.trigger("click");
        }
      } else {
        startRepo2Docker(serviceId, rowId, userOptions, user, api, base_url, utils);
      }
    }

    function homeTriggerButtonDelete(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
      updateHeaderButtons(serviceId, rowId, "disable");
      const options = getAPIOptions();
      options["success"] = function () {
        $(`tr[data-server-id='${serviceId}-${rowId}']`).each(function () {
          $(this).remove();
        });
        console.log(`Delete of ${serviceId}-${rowId} successful`);
      }
      api.delete_named_server(user, rowId, options);
    }

    function homeSummaryButtonDel(serviceId, rowId, buttonId, button_options, user, api, base_url, utils) {
      homeTriggerButtonDelete(serviceId, rowId, buttonId, button_options, user, api, base_url, utils);
    }
  {# <-- Home #}

</script>
